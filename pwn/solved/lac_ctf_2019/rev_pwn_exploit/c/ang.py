import angr

p = angr.Project('./Arith', load_options={'auto_load_libs': False})

addr_main = p.loader.main_object.get_symbol('main').rebased_addr
# addr_succeeded = p.loader.main_bin.get_symbol('show_flag').rebased_addr
addr_succeeded = (addr_main + 0xcc9, addr_main + 0x9a0, addr_main + 0x9ed,
                  addr_main + 0xa2a, addr_main + 0xa53, addr_main + 0xa7a,
                  addr_main + 0xaa1, addr_main + 0xac8, addr_main + 0xaef,
                  addr_main + 0xb16, addr_main + 0xb3d, addr_main + 0xb64,
                  addr_main + 0xb8b, addr_main + 0xbb2, addr_main + 0xbd9,
                  addr_main + 0xc00, addr_main + 0xc27)
# addr_succeeded = (addr_main + 0xcc9, addr_main + 0x9a0, addr_main + 0x9ed, addr_main + 0xa2a, addr_main + 0xa53, addr_main + 0xa7a)
# addr_failed = p.loader.main_bin.get_symbol('failed').addr
addr_failed = (addr_main + 0xca7, addr_main + 0xd7a,
               addr_main + 0x9a9, addr_main + 0x9d2)
print "main = %x" % addr_main
# print "succeeded = %x" % addr_succeeded
# print "failed = %x" % addr_failed

initial_state = p.factory.blank_state(addr=addr_main)
initial_path = p.factory.path(initial_state)
pg = p.factory.path_group(initial_path)
e = pg.explore(find=addr_succeeded, avoid=addr_failed)

if len(e.found) > 0:
    print 'Dump stdin at succeeded():'
    s = e.found[0].state
    print "%r" % s.posix.dumps(0)
