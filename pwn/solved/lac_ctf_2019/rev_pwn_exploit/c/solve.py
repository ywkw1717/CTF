#!/usr/bin/env python
from z3 import *


def main():
    solver = Solver()
    keyarray = [Int('s_%d' % i) for i in range(16)]

    for i in range(len(keyarray)):
        solver.add(0x0 <= keyarray[i], keyarray[i] <= 0x23)

    # 1
    edi = keyarray[0] + keyarray[1] + keyarray[2]
    solver.add(check(edi, 0x20) == 0x6)

    # 2
    edi = (keyarray[1] + keyarray[3]) - keyarray[5]
    solver.add(check(edi, 0x20) == 0xe)

    # 3
    edi = (keyarray[3] + keyarray[5]) + keyarray[7]
    solver.add(check(edi, 0x20) == 0xb)

    # 4
    edi = (keyarray[5] + keyarray[7]) + keyarray[9]
    solver.add(check(edi, 0x20) == 0x1d)

    # 5
    edi = (keyarray[7] + keyarray[9]) + keyarray[10]
    solver.add(check(edi, 0x20) == 0x1c)

    # 6
    edi = (keyarray[11] + keyarray[13]) + keyarray[15]
    solver.add(check(edi, 0x20) == 0x10)

    # 7
    edi = (keyarray[9] + keyarray[12]) + keyarray[15]
    solver.add(check(edi, 0x20) == 0x1b)

    # 8
    edi = (keyarray[0] + keyarray[2]) + keyarray[3]
    solver.add(check(edi, 0x20) == 0x1)

    # 9
    edi = (keyarray[2] + keyarray[4]) + keyarray[6]
    solver.add(check(edi, 0x22) == 0x9)

    # 10
    edi = (keyarray[4] + keyarray[6]) + keyarray[7]
    solver.add(check(edi, 0x25) == 0x22)

    # 11
    edi = (keyarray[6] + keyarray[7]) + keyarray[8]
    solver.add(check(edi, 0x22) == 0x16)

    # 12
    edi = (keyarray[9] + keyarray[10]) + keyarray[11]
    solver.add(check(edi, 0x23) == 0x1a)

    # 13
    edi = (keyarray[10] + keyarray[12]) + keyarray[14]
    solver.add(check(edi, 0x25) == 0x20)

    # 14
    edi = (keyarray[0] + keyarray[3]) + keyarray[6]
    solver.add(check(edi, 0x26) == 0x12)

    # 15
    edi = (keyarray[2] + keyarray[9]) + keyarray[14]
    solver.add(check(edi, 0x23) == 0x21)

    if solver.check() == sat:
        m = solver.model()
        print m

        flag = ''
        for i in keyarray:
            n = m[i].as_long()

            if n >= 0x1a and n <= 0x23:
                flag += chr(n + 0x16)
            elif n >= 0x0 and n <= 0x19:
                flag += chr(n + 0x41)

        print "\nflag: %s" % flag
    else:
        print "Not found."


def check(e1, e2):
    return e1 - (e2 * (e1 / e2))


if __name__ == "__main__":
    main()
