
Arith:     ファイル形式 elf64-x86-64


セクション .init の逆アセンブル:

00000000000006c0 <_init>:
 6c0:	48 83 ec 08          	sub    rsp,0x8
 6c4:	48 8b 05 1d 19 20 00 	mov    rax,QWORD PTR [rip+0x20191d]        # 201fe8 <_GLOBAL_OFFSET_TABLE_+0x68>
 6cb:	48 85 c0             	test   rax,rax
 6ce:	74 02                	je     6d2 <_init+0x12>
 6d0:	ff d0                	call   rax
 6d2:	48 83 c4 08          	add    rsp,0x8
 6d6:	c3                   	ret    

セクション .plt の逆アセンブル:

00000000000006e0 <fclose@plt-0x10>:
 6e0:	ff 35 a2 18 20 00    	push   QWORD PTR [rip+0x2018a2]        # 201f88 <_GLOBAL_OFFSET_TABLE_+0x8>
 6e6:	ff 25 a4 18 20 00    	jmp    QWORD PTR [rip+0x2018a4]        # 201f90 <_GLOBAL_OFFSET_TABLE_+0x10>
 6ec:	0f 1f 40 00          	nop    DWORD PTR [rax+0x0]

00000000000006f0 <fclose@plt>:
 6f0:	ff 25 a2 18 20 00    	jmp    QWORD PTR [rip+0x2018a2]        # 201f98 <_GLOBAL_OFFSET_TABLE_+0x18>
 6f6:	68 00 00 00 00       	push   0x0
 6fb:	e9 e0 ff ff ff       	jmp    6e0 <_init+0x20>

0000000000000700 <strlen@plt>:
 700:	ff 25 9a 18 20 00    	jmp    QWORD PTR [rip+0x20189a]        # 201fa0 <_GLOBAL_OFFSET_TABLE_+0x20>
 706:	68 01 00 00 00       	push   0x1
 70b:	e9 d0 ff ff ff       	jmp    6e0 <_init+0x20>

0000000000000710 <__stack_chk_fail@plt>:
 710:	ff 25 92 18 20 00    	jmp    QWORD PTR [rip+0x201892]        # 201fa8 <_GLOBAL_OFFSET_TABLE_+0x28>
 716:	68 02 00 00 00       	push   0x2
 71b:	e9 c0 ff ff ff       	jmp    6e0 <_init+0x20>

0000000000000720 <printf@plt>:
 720:	ff 25 8a 18 20 00    	jmp    QWORD PTR [rip+0x20188a]        # 201fb0 <_GLOBAL_OFFSET_TABLE_+0x30>
 726:	68 03 00 00 00       	push   0x3
 72b:	e9 b0 ff ff ff       	jmp    6e0 <_init+0x20>

0000000000000730 <fgets@plt>:
 730:	ff 25 82 18 20 00    	jmp    QWORD PTR [rip+0x201882]        # 201fb8 <_GLOBAL_OFFSET_TABLE_+0x38>
 736:	68 04 00 00 00       	push   0x4
 73b:	e9 a0 ff ff ff       	jmp    6e0 <_init+0x20>

0000000000000740 <fopen@plt>:
 740:	ff 25 7a 18 20 00    	jmp    QWORD PTR [rip+0x20187a]        # 201fc0 <_GLOBAL_OFFSET_TABLE_+0x40>
 746:	68 05 00 00 00       	push   0x5
 74b:	e9 90 ff ff ff       	jmp    6e0 <_init+0x20>

0000000000000750 <__isoc99_scanf@plt>:
 750:	ff 25 72 18 20 00    	jmp    QWORD PTR [rip+0x201872]        # 201fc8 <_GLOBAL_OFFSET_TABLE_+0x48>
 756:	68 06 00 00 00       	push   0x6
 75b:	e9 80 ff ff ff       	jmp    6e0 <_init+0x20>

0000000000000760 <exit@plt>:
 760:	ff 25 6a 18 20 00    	jmp    QWORD PTR [rip+0x20186a]        # 201fd0 <_GLOBAL_OFFSET_TABLE_+0x50>
 766:	68 07 00 00 00       	push   0x7
 76b:	e9 70 ff ff ff       	jmp    6e0 <_init+0x20>

セクション .plt.got の逆アセンブル:

0000000000000770 <.plt.got>:
 770:	ff 25 82 18 20 00    	jmp    QWORD PTR [rip+0x201882]        # 201ff8 <_GLOBAL_OFFSET_TABLE_+0x78>
 776:	66 90                	xchg   ax,ax

セクション .text の逆アセンブル:

0000000000000780 <_start>:
 780:	31 ed                	xor    ebp,ebp
 782:	49 89 d1             	mov    r9,rdx
 785:	5e                   	pop    rsi
 786:	48 89 e2             	mov    rdx,rsp
 789:	48 83 e4 f0          	and    rsp,0xfffffffffffffff0
 78d:	50                   	push   rax
 78e:	54                   	push   rsp
 78f:	4c 8d 05 da 06 00 00 	lea    r8,[rip+0x6da]        # e70 <__libc_csu_fini>
 796:	48 8d 0d 63 06 00 00 	lea    rcx,[rip+0x663]        # e00 <__libc_csu_init>
 79d:	48 8d 3d ad 04 00 00 	lea    rdi,[rip+0x4ad]        # c51 <main>
 7a4:	ff 15 36 18 20 00    	call   QWORD PTR [rip+0x201836]        # 201fe0 <_GLOBAL_OFFSET_TABLE_+0x60>
 7aa:	f4                   	hlt    
 7ab:	0f 1f 44 00 00       	nop    DWORD PTR [rax+rax*1+0x0]

00000000000007b0 <deregister_tm_clones>:
 7b0:	48 8d 3d 61 18 20 00 	lea    rdi,[rip+0x201861]        # 202018 <__TMC_END__>
 7b7:	55                   	push   rbp
 7b8:	48 8d 05 59 18 20 00 	lea    rax,[rip+0x201859]        # 202018 <__TMC_END__>
 7bf:	48 39 f8             	cmp    rax,rdi
 7c2:	48 89 e5             	mov    rbp,rsp
 7c5:	74 19                	je     7e0 <deregister_tm_clones+0x30>
 7c7:	48 8b 05 0a 18 20 00 	mov    rax,QWORD PTR [rip+0x20180a]        # 201fd8 <_GLOBAL_OFFSET_TABLE_+0x58>
 7ce:	48 85 c0             	test   rax,rax
 7d1:	74 0d                	je     7e0 <deregister_tm_clones+0x30>
 7d3:	5d                   	pop    rbp
 7d4:	ff e0                	jmp    rax
 7d6:	66 2e 0f 1f 84 00 00 	nop    WORD PTR cs:[rax+rax*1+0x0]
 7dd:	00 00 00 
 7e0:	5d                   	pop    rbp
 7e1:	c3                   	ret    
 7e2:	0f 1f 40 00          	nop    DWORD PTR [rax+0x0]
 7e6:	66 2e 0f 1f 84 00 00 	nop    WORD PTR cs:[rax+rax*1+0x0]
 7ed:	00 00 00 

00000000000007f0 <register_tm_clones>:
 7f0:	48 8d 3d 21 18 20 00 	lea    rdi,[rip+0x201821]        # 202018 <__TMC_END__>
 7f7:	48 8d 35 1a 18 20 00 	lea    rsi,[rip+0x20181a]        # 202018 <__TMC_END__>
 7fe:	55                   	push   rbp
 7ff:	48 29 fe             	sub    rsi,rdi
 802:	48 89 e5             	mov    rbp,rsp
 805:	48 c1 fe 03          	sar    rsi,0x3
 809:	48 89 f0             	mov    rax,rsi
 80c:	48 c1 e8 3f          	shr    rax,0x3f
 810:	48 01 c6             	add    rsi,rax
 813:	48 d1 fe             	sar    rsi,1
 816:	74 18                	je     830 <register_tm_clones+0x40>
 818:	48 8b 05 d1 17 20 00 	mov    rax,QWORD PTR [rip+0x2017d1]        # 201ff0 <_GLOBAL_OFFSET_TABLE_+0x70>
 81f:	48 85 c0             	test   rax,rax
 822:	74 0c                	je     830 <register_tm_clones+0x40>
 824:	5d                   	pop    rbp
 825:	ff e0                	jmp    rax
 827:	66 0f 1f 84 00 00 00 	nop    WORD PTR [rax+rax*1+0x0]
 82e:	00 00 
 830:	5d                   	pop    rbp
 831:	c3                   	ret    
 832:	0f 1f 40 00          	nop    DWORD PTR [rax+0x0]
 836:	66 2e 0f 1f 84 00 00 	nop    WORD PTR cs:[rax+rax*1+0x0]
 83d:	00 00 00 

0000000000000840 <__do_global_dtors_aux>:
 840:	80 3d d9 17 20 00 00 	cmp    BYTE PTR [rip+0x2017d9],0x0        # 202020 <completed.7696>
 847:	75 2f                	jne    878 <__do_global_dtors_aux+0x38>
 849:	48 83 3d a7 17 20 00 	cmp    QWORD PTR [rip+0x2017a7],0x0        # 201ff8 <_GLOBAL_OFFSET_TABLE_+0x78>
 850:	00 
 851:	55                   	push   rbp
 852:	48 89 e5             	mov    rbp,rsp
 855:	74 0c                	je     863 <__do_global_dtors_aux+0x23>
 857:	48 8b 3d aa 17 20 00 	mov    rdi,QWORD PTR [rip+0x2017aa]        # 202008 <__dso_handle>
 85e:	e8 0d ff ff ff       	call   770 <exit@plt+0x10>
 863:	e8 48 ff ff ff       	call   7b0 <deregister_tm_clones>
 868:	c6 05 b1 17 20 00 01 	mov    BYTE PTR [rip+0x2017b1],0x1        # 202020 <completed.7696>
 86f:	5d                   	pop    rbp
 870:	c3                   	ret    
 871:	0f 1f 80 00 00 00 00 	nop    DWORD PTR [rax+0x0]
 878:	f3 c3                	repz ret 
 87a:	66 0f 1f 44 00 00    	nop    WORD PTR [rax+rax*1+0x0]

0000000000000880 <frame_dummy>:
 880:	55                   	push   rbp
 881:	48 89 e5             	mov    rbp,rsp
 884:	5d                   	pop    rbp
 885:	e9 66 ff ff ff       	jmp    7f0 <register_tm_clones>

000000000000088a <show_flag>:
 88a:	55                   	push   rbp
 88b:	48 89 e5             	mov    rbp,rsp
 88e:	48 81 ec 20 01 00 00 	sub    rsp,0x120
 895:	64 48 8b 04 25 28 00 	mov    rax,QWORD PTR fs:0x28
 89c:	00 00 
 89e:	48 89 45 f8          	mov    QWORD PTR [rbp-0x8],rax
 8a2:	31 c0                	xor    eax,eax
 8a4:	48 8d 35 dd 05 00 00 	lea    rsi,[rip+0x5dd]        # e88 <_IO_stdin_used+0x8>
 8ab:	48 8d 3d d8 05 00 00 	lea    rdi,[rip+0x5d8]        # e8a <_IO_stdin_used+0xa>
 8b2:	e8 89 fe ff ff       	call   740 <fopen@plt>
 8b7:	48 89 85 e8 fe ff ff 	mov    QWORD PTR [rbp-0x118],rax
 8be:	48 83 bd e8 fe ff ff 	cmp    QWORD PTR [rbp-0x118],0x0
 8c5:	00 
 8c6:	75 36                	jne    8fe <show_flag+0x74>
 8c8:	48 8d 3d c9 05 00 00 	lea    rdi,[rip+0x5c9]        # e98 <_IO_stdin_used+0x18>
 8cf:	b8 00 00 00 00       	mov    eax,0x0
 8d4:	e8 47 fe ff ff       	call   720 <printf@plt>
 8d9:	bf 01 00 00 00       	mov    edi,0x1
 8de:	e8 7d fe ff ff       	call   760 <exit@plt>
 8e3:	48 8d 85 f0 fe ff ff 	lea    rax,[rbp-0x110]
 8ea:	48 89 c6             	mov    rsi,rax
 8ed:	48 8d 3d d4 05 00 00 	lea    rdi,[rip+0x5d4]        # ec8 <_IO_stdin_used+0x48>
 8f4:	b8 00 00 00 00       	mov    eax,0x0
 8f9:	e8 22 fe ff ff       	call   720 <printf@plt>
 8fe:	48 8b 95 e8 fe ff ff 	mov    rdx,QWORD PTR [rbp-0x118]
 905:	48 8d 85 f0 fe ff ff 	lea    rax,[rbp-0x110]
 90c:	be 00 01 00 00       	mov    esi,0x100
 911:	48 89 c7             	mov    rdi,rax
 914:	e8 17 fe ff ff       	call   730 <fgets@plt>
 919:	48 85 c0             	test   rax,rax
 91c:	75 c5                	jne    8e3 <show_flag+0x59>
 91e:	48 8d 85 f0 fe ff ff 	lea    rax,[rbp-0x110]
 925:	48 89 c6             	mov    rsi,rax
 928:	48 8d 3d a1 05 00 00 	lea    rdi,[rip+0x5a1]        # ed0 <_IO_stdin_used+0x50>
 92f:	b8 00 00 00 00       	mov    eax,0x0
 934:	e8 e7 fd ff ff       	call   720 <printf@plt>
 939:	48 8b 85 e8 fe ff ff 	mov    rax,QWORD PTR [rbp-0x118]
 940:	48 89 c7             	mov    rdi,rax
 943:	e8 a8 fd ff ff       	call   6f0 <fclose@plt>
 948:	90                   	nop
 949:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
 94d:	64 48 33 04 25 28 00 	xor    rax,QWORD PTR fs:0x28
 954:	00 00 
 956:	74 05                	je     95d <show_flag+0xd3>
 958:	e8 b3 fd ff ff       	call   710 <__stack_chk_fail@plt>
 95d:	c9                   	leave  
 95e:	c3                   	ret    

000000000000095f <check>:
 95f:	55                   	push   rbp
 960:	48 89 e5             	mov    rbp,rsp
 963:	48 83 ec 20          	sub    rsp,0x20
 967:	89 7d ec             	mov    DWORD PTR [rbp-0x14],edi
 96a:	89 75 e8             	mov    DWORD PTR [rbp-0x18],esi
 96d:	89 55 e4             	mov    DWORD PTR [rbp-0x1c],edx
 970:	8b 45 ec             	mov    eax,DWORD PTR [rbp-0x14]
 973:	99                   	cdq    

 974:	f7 7d e8             	idiv   DWORD PTR [rbp-0x18]
 977:	89 45 f4             	mov    DWORD PTR [rbp-0xc],eax
 97a:	8b 45 e8             	mov    eax,DWORD PTR [rbp-0x18]
 97d:	0f af 45 f4          	imul   eax,DWORD PTR [rbp-0xc]
 981:	8b 55 ec             	mov    edx,DWORD PTR [rbp-0x14]
 984:	29 c2                	sub    edx,eax
 986:	89 d0                	mov    eax,edx
 988:	89 45 f8             	mov    DWORD PTR [rbp-0x8],eax
 98b:	8b 45 f8             	mov    eax,DWORD PTR [rbp-0x8]

 98e:	3b 45 e4             	cmp    eax,DWORD PTR [rbp-0x1c] #  eax == 第3引数(edx) ?
 991:	0f 94 c0             	sete   al # zeroフラグが立っていたらalを1に、立っていなかったら0にする
 994:	0f b6 c0             	movzx  eax,al
 997:	89 45 fc             	mov    DWORD PTR [rbp-0x4],eax
 99a:	83 7d fc 00          	cmp    DWORD PTR [rbp-0x4],0x0
 99e:	74 09                	je     9a9 <check+0x4a>

 9a0:	48 8d 05 50 05 00 00 	lea    rax,[rip+0x550]  # OK    # ef7 <_IO_stdin_used+0x77>
 9a7:	eb 07                	jmp    9b0 <check+0x51>

 9a9:	48 8d 05 4a 05 00 00 	lea    rax,[rip+0x54a]        # efa <_IO_stdin_used+0x7a>

 9b0:	8b 0d 5a 16 20 00    	mov    ecx,DWORD PTR [rip+0x20165a]        # 202010 <counter>
 9b6:	48 89 c2             	mov    rdx,rax
 9b9:	89 ce                	mov    esi,ecx
 9bb:	48 8d 3d 3b 05 00 00 	lea    rdi,[rip+0x53b]  # Test num   # efd <_IO_stdin_used+0x7d>
 9c2:	b8 00 00 00 00       	mov    eax,0x0
 9c7:	e8 54 fd ff ff       	call   720 <printf@plt>  # Test%d: %s\n
 9cc:	83 7d fc 00          	cmp    DWORD PTR [rbp-0x4],0x0
 9d0:	75 1b                	jne    9ed <check+0x8e>

 9d2:	48 8d 3d 30 05 00 00 	lea    rdi,[rip+0x530]  # Wrong access key!!  # f09 <_IO_stdin_used+0x89>
 9d9:	b8 00 00 00 00       	mov    eax,0x0
 9de:	e8 3d fd ff ff       	call   720 <printf@plt>
 9e3:	bf 01 00 00 00       	mov    edi,0x1
 9e8:	e8 73 fd ff ff       	call   760 <exit@plt>

 9ed:	8b 05 1d 16 20 00    	mov    eax,DWORD PTR [rip+0x20161d]        # 202010 <counter>
 9f3:	83 c0 01             	add    eax,0x1
 9f6:	89 05 14 16 20 00    	mov    DWORD PTR [rip+0x201614],eax        # 202010 <counter>
 9fc:	90                   	nop
 9fd:	c9                   	leave  
 9fe:	c3                   	ret    

00000000000009ff <calc>:
 9ff:	55                   	push   rbp
 a00:	48 89 e5             	mov    rbp,rsp
 a03:	8b 15 37 16 20 00    	mov    edx,DWORD PTR [rip+0x201637]        # 202040 <keyarray>
 a09:	8b 05 35 16 20 00    	mov    eax,DWORD PTR [rip+0x201635]        # 202044 <keyarray+0x4>
 a0f:	01 c2                	add    edx,eax  # edx = (i1 + i2)
 a11:	8b 05 31 16 20 00    	mov    eax,DWORD PTR [rip+0x201631]        # 202048 <keyarray+0x8>
 a17:	01 d0                	add    eax,edx  # eax = i3 + (i1 + i2)
 a19:	ba 06 00 00 00       	mov    edx,0x6  # edx = 0x6
 a1e:	be 20 00 00 00       	mov    esi,0x20  # esi = 0x20
 a23:	89 c7                	mov    edi,eax  # edi = i3 + (i1 + i2)
 a25:	e8 35 ff ff ff       	call   95f <check>

 a2a:	8b 15 14 16 20 00    	mov    edx,DWORD PTR [rip+0x201614]        # 202044 <keyarray+0x4>
 a30:	8b 05 16 16 20 00    	mov    eax,DWORD PTR [rip+0x201616]        # 20204c <keyarray+0xc>
 a36:	01 c2                	add    edx,eax  # edx = (i2 + i4)
 a38:	8b 05 16 16 20 00    	mov    eax,DWORD PTR [rip+0x201616]        # 202054 <keyarray+0x14>
 a3e:	29 c2                	sub    edx,eax  # edx = (i2 + i4) - i6
 a40:	89 d0                	mov    eax,edx  # eax = (i2 + i4) - i6
 a42:	ba 0e 00 00 00       	mov    edx,0xe  # edx = 0xe
 a47:	be 20 00 00 00       	mov    esi,0x20 # esi = 0x20
 a4c:	89 c7                	mov    edi,eax  # edi = (i2 + i4) - i6
 a4e:	e8 0c ff ff ff       	call   95f <check>

 a53:	8b 15 f3 15 20 00    	mov    edx,DWORD PTR [rip+0x2015f3]        # 20204c <keyarray+0xc>
 a59:	8b 05 f5 15 20 00    	mov    eax,DWORD PTR [rip+0x2015f5]        # 202054 <keyarray+0x14>
 a5f:	01 c2                	add    edx,eax  # edx = (i4 + i6)
 a61:	8b 05 f5 15 20 00    	mov    eax,DWORD PTR [rip+0x2015f5]        # 20205c <keyarray+0x1c>
 a67:	01 d0                	add    eax,edx  # eax = i8 + (i4 + i6)
 a69:	ba 0b 00 00 00       	mov    edx,0xb  # edx = 0xb
 a6e:	be 20 00 00 00       	mov    esi,0x20 # esi = 0x20
 a73:	89 c7                	mov    edi,eax  # edi = i8 + (i4 + i6)
 a75:	e8 e5 fe ff ff       	call   95f <check>

 a7a:	8b 15 d4 15 20 00    	mov    edx,DWORD PTR [rip+0x2015d4]        # 202054 <keyarray+0x14>
 a80:	8b 05 d6 15 20 00    	mov    eax,DWORD PTR [rip+0x2015d6]        # 20205c <keyarray+0x1c>
 a86:	01 c2                	add    edx,eax  # edx = (i6 + i8)
 a88:	8b 05 d6 15 20 00    	mov    eax,DWORD PTR [rip+0x2015d6]        # 202064 <keyarray+0x24>
 a8e:	01 d0                	add    eax,edx  # eax = i10 + (i6 + i8)
 a90:	ba 1d 00 00 00       	mov    edx,0x1d # edx = 0x1d
 a95:	be 20 00 00 00       	mov    esi,0x20 # esi = 0x20
 a9a:	89 c7                	mov    edi,eax  # edi = i10 + (i6 + i8)
 a9c:	e8 be fe ff ff       	call   95f <check>

 aa1:	8b 15 b5 15 20 00    	mov    edx,DWORD PTR [rip+0x2015b5]        # 20205c <keyarray+0x1c>
 aa7:	8b 05 b7 15 20 00    	mov    eax,DWORD PTR [rip+0x2015b7]        # 202064 <keyarray+0x24>
 aad:	01 c2                	add    edx,eax  # edx = (i8 + i10)
 aaf:	8b 05 b3 15 20 00    	mov    eax,DWORD PTR [rip+0x2015b3]        # 202068 <keyarray+0x28>
 ab5:	01 d0                	add    eax,edx  # eax = i11 + (i8 + i10)
 ab7:	ba 1c 00 00 00       	mov    edx,0x1c # edx = 0x1c
 abc:	be 20 00 00 00       	mov    esi,0x20 # esi = 0x20
 ac1:	89 c7                	mov    edi,eax  # edi = i11 + (i8 + i10)
 ac3:	e8 97 fe ff ff       	call   95f <check>

 ac8:	8b 15 9e 15 20 00    	mov    edx,DWORD PTR [rip+0x20159e]        # 20206c <keyarray+0x2c>
 ace:	8b 05 a0 15 20 00    	mov    eax,DWORD PTR [rip+0x2015a0]        # 202074 <keyarray+0x34>
 ad4:	01 c2                	add    edx,eax   # edx = (i12 + i14)
 ad6:	8b 05 a0 15 20 00    	mov    eax,DWORD PTR [rip+0x2015a0]        # 20207c <keyarray+0x3c>
 adc:	01 d0                	add    eax,edx   # eax = i16 + (i12 + i14)
 ade:	ba 10 00 00 00       	mov    edx,0x10  # edx = 0x10
 ae3:	be 20 00 00 00       	mov    esi,0x20  # esi = 0x20
 ae8:	89 c7                	mov    edi,eax   # edi = i16 + (i12 + i14)
 aea:	e8 70 fe ff ff       	call   95f <check>

 aef:	8b 15 7b 15 20 00    	mov    edx,DWORD PTR [rip+0x20157b]        # 202070 <keyarray+0x30>
 af5:	8b 05 69 15 20 00    	mov    eax,DWORD PTR [rip+0x201569]        # 202064 <keyarray+0x24>
 afb:	01 c2                	add    edx,eax  # edx = (i13 + i10)
 afd:	8b 05 79 15 20 00    	mov    eax,DWORD PTR [rip+0x201579]        # 20207c <keyarray+0x3c>
 b03:	01 d0                	add    eax,edx  # eax = i16 + (i13 + i10)
 b05:	ba 1b 00 00 00       	mov    edx,0x1b
 b0a:	be 20 00 00 00       	mov    esi,0x20
 b0f:	89 c7                	mov    edi,eax
 b11:	e8 49 fe ff ff       	call   95f <check>

 b16:	8b 15 24 15 20 00    	mov    edx,DWORD PTR [rip+0x201524]        # 202040 <keyarray>
 b1c:	8b 05 26 15 20 00    	mov    eax,DWORD PTR [rip+0x201526]        # 202048 <keyarray+0x8>
 b22:	01 c2                	add    edx,eax  # edx = (i1 + i3)
 b24:	8b 05 22 15 20 00    	mov    eax,DWORD PTR [rip+0x201522]        # 20204c <keyarray+0xc>
 b2a:	01 d0                	add    eax,edx  # eax = i4 + (i1 + i3)
 b2c:	ba 01 00 00 00       	mov    edx,0x1
 b31:	be 20 00 00 00       	mov    esi,0x20
 b36:	89 c7                	mov    edi,eax
 b38:	e8 22 fe ff ff       	call   95f <check>

 b3d:	8b 15 05 15 20 00    	mov    edx,DWORD PTR [rip+0x201505]        # 202048 <keyarray+0x8>
 b43:	8b 05 07 15 20 00    	mov    eax,DWORD PTR [rip+0x201507]        # 202050 <keyarray+0x10>
 b49:	01 c2                	add    edx,eax  # edx = (i3 + i5)
 b4b:	8b 05 07 15 20 00    	mov    eax,DWORD PTR [rip+0x201507]        # 202058 <keyarray+0x18>
 b51:	01 d0                	add    eax,edx  # eax = i7 + (i3 + i5)
 b53:	ba 09 00 00 00       	mov    edx,0x9
 b58:	be 22 00 00 00       	mov    esi,0x22
 b5d:	89 c7                	mov    edi,eax
 b5f:	e8 fb fd ff ff       	call   95f <check>

 b64:	8b 15 e6 14 20 00    	mov    edx,DWORD PTR [rip+0x2014e6]        # 202050 <keyarray+0x10>
 b6a:	8b 05 e8 14 20 00    	mov    eax,DWORD PTR [rip+0x2014e8]        # 202058 <keyarray+0x18>
 b70:	01 c2                	add    edx,eax  # edx = (i5 + i7)
 b72:	8b 05 e4 14 20 00    	mov    eax,DWORD PTR [rip+0x2014e4]        # 20205c <keyarray+0x1c>
 b78:	01 d0                	add    eax,edx  # eax = i8 + (i5 + i7)
 b7a:	ba 22 00 00 00       	mov    edx,0x22
 b7f:	be 25 00 00 00       	mov    esi,0x25
 b84:	89 c7                	mov    edi,eax
 b86:	e8 d4 fd ff ff       	call   95f <check>

 b8b:	8b 15 c7 14 20 00    	mov    edx,DWORD PTR [rip+0x2014c7]        # 202058 <keyarray+0x18>
 b91:	8b 05 c5 14 20 00    	mov    eax,DWORD PTR [rip+0x2014c5]        # 20205c <keyarray+0x1c>
 b97:	01 c2                	add    edx,eax  # edx = (i7 + i8)
 b99:	8b 05 c1 14 20 00    	mov    eax,DWORD PTR [rip+0x2014c1]        # 202060 <keyarray+0x20>
 b9f:	01 d0                	add    eax,edx  # eax = i9 + (i7 + i8)
 ba1:	ba 16 00 00 00       	mov    edx,0x16
 ba6:	be 22 00 00 00       	mov    esi,0x22
 bab:	89 c7                	mov    edi,eax
 bad:	e8 ad fd ff ff       	call   95f <check>

 bb2:	8b 15 ac 14 20 00    	mov    edx,DWORD PTR [rip+0x2014ac]        # 202064 <keyarray+0x24>
 bb8:	8b 05 aa 14 20 00    	mov    eax,DWORD PTR [rip+0x2014aa]        # 202068 <keyarray+0x28>
 bbe:	01 c2                	add    edx,eax  # edx = (i10 + i11)
 bc0:	8b 05 a6 14 20 00    	mov    eax,DWORD PTR [rip+0x2014a6]        # 20206c <keyarray+0x2c>
 bc6:	01 d0                	add    eax,edx  # eax = i12 + (i10 + i11)
 bc8:	ba 1a 00 00 00       	mov    edx,0x1a
 bcd:	be 23 00 00 00       	mov    esi,0x23
 bd2:	89 c7                	mov    edi,eax
 bd4:	e8 86 fd ff ff       	call   95f <check>

 bd9:	8b 15 91 14 20 00    	mov    edx,DWORD PTR [rip+0x201491]        # 202070 <keyarray+0x30>
 bdf:	8b 05 93 14 20 00    	mov    eax,DWORD PTR [rip+0x201493]        # 202078 <keyarray+0x38>
 be5:	01 c2                	add    edx,eax  # edx = (i13 + i15)
 be7:	8b 05 7b 14 20 00    	mov    eax,DWORD PTR [rip+0x20147b]        # 202068 <keyarray+0x28>
 bed:	01 d0                	add    eax,edx  # eax = i11 + (i13 + i15)
 bef:	ba 20 00 00 00       	mov    edx,0x20
 bf4:	be 25 00 00 00       	mov    esi,0x25
 bf9:	89 c7                	mov    edi,eax
 bfb:	e8 5f fd ff ff       	call   95f <check>

 c00:	8b 15 46 14 20 00    	mov    edx,DWORD PTR [rip+0x201446]        # 20204c <keyarray+0xc>
 c06:	8b 05 4c 14 20 00    	mov    eax,DWORD PTR [rip+0x20144c]        # 202058 <keyarray+0x18>
 c0c:	01 c2                	add    edx,eax  # edx = (i4 + i7)
 c0e:	8b 05 2c 14 20 00    	mov    eax,DWORD PTR [rip+0x20142c]        # 202040 <keyarray>
 c14:	01 d0                	add    eax,edx  # eax = i + (i4 + i7)
 c16:	ba 12 00 00 00       	mov    edx,0x12
 c1b:	be 26 00 00 00       	mov    esi,0x26
 c20:	89 c7                	mov    edi,eax
 c22:	e8 38 fd ff ff       	call   95f <check>

 c27:	8b 15 1b 14 20 00    	mov    edx,DWORD PTR [rip+0x20141b]        # 202048 <keyarray+0x8>
 c2d:	8b 05 31 14 20 00    	mov    eax,DWORD PTR [rip+0x201431]        # 202064 <keyarray+0x24>
 c33:	01 c2                	add    edx,eax  # edx = (i3 + i10)
 c35:	8b 05 3d 14 20 00    	mov    eax,DWORD PTR [rip+0x20143d]        # 202078 <keyarray+0x38>
 c3b:	01 d0                	add    eax,edx  # eax = i15 + (i3 + i10)
 c3d:	ba 21 00 00 00       	mov    edx,0x21
 c42:	be 23 00 00 00       	mov    esi,0x23
 c47:	89 c7                	mov    edi,eax
 c49:	e8 11 fd ff ff       	call   95f <check>

 c4e:	90                   	nop
 c4f:	5d                   	pop    rbp
 c50:	c3                   	ret    

0000000000000c51 <main>:
 c51:	55                   	push   rbp
 c52:	48 89 e5             	mov    rbp,rsp
 c55:	53                   	push   rbx
 c56:	48 81 ec 88 00 00 00 	sub    rsp,0x88
 c5d:	64 48 8b 04 25 28 00 	mov    rax,QWORD PTR fs:0x28
 c64:	00 00 
 c66:	48 89 45 e8          	mov    QWORD PTR [rbp-0x18],rax
 c6a:	31 c0                	xor    eax,eax
 c6c:	48 8d 3d b5 02 00 00 	lea    rdi,[rip+0x2b5]        # f28 <_IO_stdin_used+0xa8>
 c73:	b8 00 00 00 00       	mov    eax,0x0
 c78:	e8 a3 fa ff ff       	call   720 <printf@plt>
 c7d:	48 8d 45 80          	lea    rax,[rbp-0x80]
 c81:	48 89 c6             	mov    rsi,rax
 c84:	48 8d 3d e1 02 00 00 	lea    rdi,[rip+0x2e1]        # f6c <_IO_stdin_used+0xec>
 c8b:	b8 00 00 00 00       	mov    eax,0x0
 c90:	e8 bb fa ff ff       	call   750 <__isoc99_scanf@plt>
 c95:	48 8d 45 80          	lea    rax,[rbp-0x80]
 c99:	48 89 c7             	mov    rdi,rax
 c9c:	e8 5f fa ff ff       	call   700 <strlen@plt>
 ca1:	48 83 f8 10          	cmp    rax,0x10
 ca5:	74 22                	je     cc9 <main+0x78>
 ca7:	48 8d 45 80          	lea    rax,[rbp-0x80]
 cab:	48 89 c6             	mov    rsi,rax
 cae:	48 8d 3d c2 02 00 00 	lea    rdi,[rip+0x2c2]        # f77 <_IO_stdin_used+0xf7>
 cb5:	b8 00 00 00 00       	mov    eax,0x0
 cba:	e8 61 fa ff ff       	call   720 <printf@plt>
 cbf:	bf 01 00 00 00       	mov    edi,0x1
 cc4:	e8 97 fa ff ff       	call   760 <exit@plt>

 cc9:	c7 85 7c ff ff ff 00 	mov    DWORD PTR [rbp-0x84],0x0
 cd0:	00 00 00 
 cd3:	e9 cb 00 00 00       	jmp    da3 <main+0x152>

 # loop
 cd8:	8b 85 7c ff ff ff    	mov    eax,DWORD PTR [rbp-0x84]
 cde:	48 98                	cdqe   
 ce0:	0f b6 44 05 80       	movzx  eax,BYTE PTR [rbp+rax*1-0x80]  # eax = InputValue[i]
 ce5:	3c 2f                	cmp    al,0x2f "/"
 ce7:	7e 40                	jle    d29 <main+0xd8>  # less than or equal ≦

 ce9:	8b 85 7c ff ff ff    	mov    eax,DWORD PTR [rbp-0x84]
 cef:	48 98                	cdqe   
 cf1:	0f b6 44 05 80       	movzx  eax,BYTE PTR [rbp+rax*1-0x80]
 cf6:	3c 39                	cmp    al,0x39 "9"
 cf8:	7f 2f                	jg     d29 <main+0xd8> # greater than <
 # "/" < value <= "9" を調べることで数字かどうかチェックしている

 # 数字だった時の処理(0x16引いてkeyarrayに格納)
 cfa:	8b 85 7c ff ff ff    	mov    eax,DWORD PTR [rbp-0x84]
 d00:	48 98                	cdqe   
 d02:	0f b6 44 05 80       	movzx  eax,BYTE PTR [rbp+rax*1-0x80]
 d07:	0f be c0             	movsx  eax,al
 d0a:	8d 48 ea             	lea    ecx,[rax-0x16]
 d0d:	8b 85 7c ff ff ff    	mov    eax,DWORD PTR [rbp-0x84]
 d13:	48 98                	cdqe   
 d15:	48 8d 14 85 00 00 00 	lea    rdx,[rax*4+0x0]
 d1c:	00 
 d1d:	48 8d 05 1c 13 20 00 	lea    rax,[rip+0x20131c]        # 202040 <keyarray>
 d24:	89 0c 02             	mov    DWORD PTR [rdx+rax*1],ecx
 d27:	eb 73                	jmp    d9c <main+0x14b>


 d29:	8b 85 7c ff ff ff    	mov    eax,DWORD PTR [rbp-0x84]
 d2f:	48 98                	cdqe   
 d31:	0f b6 44 05 80       	movzx  eax,BYTE PTR [rbp+rax*1-0x80]
 d36:	3c 40                	cmp    al,0x40 "@"
 d38:	7e 40                	jle    d7a <main+0x129>

 d3a:	8b 85 7c ff ff ff    	mov    eax,DWORD PTR [rbp-0x84]
 d40:	48 98                	cdqe   
 d42:	0f b6 44 05 80       	movzx  eax,BYTE PTR [rbp+rax*1-0x80]
 d47:	3c 5a                	cmp    al,0x5a "Z"
 d49:	7f 2f                	jg     d7a <main+0x129>
 # "@" < value <= "Z" を調べることで英大文字かどうかチェックしている

 # 英大文字だった時の処理(0x41引いてkeyarrayに格納)
 d4b:	8b 85 7c ff ff ff    	mov    eax,DWORD PTR [rbp-0x84]
 d51:	48 98                	cdqe   
 d53:	0f b6 44 05 80       	movzx  eax,BYTE PTR [rbp+rax*1-0x80]
 d58:	0f be c0             	movsx  eax,al
 d5b:	8d 48 bf             	lea    ecx,[rax-0x41]  # ecx = InputValue[i] - 0x41
 d5e:	8b 85 7c ff ff ff    	mov    eax,DWORD PTR [rbp-0x84]
 d64:	48 98                	cdqe   
 d66:	48 8d 14 85 00 00 00 	lea    rdx,[rax*4+0x0]
 d6d:	00 
 d6e:	48 8d 05 cb 12 20 00 	lea    rax,[rip+0x2012cb]        # 202040 <keyarray>  # 0x555555756040とかに格納する, keyarray
 d75:	89 0c 02             	mov    DWORD PTR [rdx+rax*1],ecx
 d78:	eb 22                	jmp    d9c <main+0x14b>


 d7a:	48 8d 45 80          	lea    rax,[rbp-0x80]
 d7e:	48 89 c6             	mov    rsi,rax
 d81:	48 8d 3d ef 01 00 00 	lea    rdi,[rip+0x1ef]        # f77 <_IO_stdin_used+0xf7>
 d88:	b8 00 00 00 00       	mov    eax,0x0
 d8d:	e8 8e f9 ff ff       	call   720 <printf@plt>
 d92:	bf 01 00 00 00       	mov    edi,0x1
 d97:	e8 c4 f9 ff ff       	call   760 <exit@plt>

 d9c:	83 85 7c ff ff ff 01 	add    DWORD PTR [rbp-0x84],0x1  # i++

 da3:	8b 85 7c ff ff ff    	mov    eax,DWORD PTR [rbp-0x84]  # [rbp-0x84] is count number?
 da9:	48 63 d8             	movsxd rbx,eax
 dac:	48 8d 45 80          	lea    rax,[rbp-0x80]  # [rbp-0x80] is InputValue
 db0:	48 89 c7             	mov    rdi,rax
 db3:	e8 48 f9 ff ff       	call   700 <strlen@plt>
 db8:	48 39 c3             	cmp    rbx,rax
 dbb:	0f 82 17 ff ff ff    	jb     cd8 <main+0x87> # loop end  # 入力値に対して16回処理を繰り返す

 dc1:	b8 00 00 00 00       	mov    eax,0x0
 dc6:	e8 34 fc ff ff       	call   9ff <calc>
 dcb:	b8 00 00 00 00       	mov    eax,0x0
 dd0:	e8 b5 fa ff ff       	call   88a <show_flag>
 dd5:	b8 00 00 00 00       	mov    eax,0x0
 dda:	48 8b 5d e8          	mov    rbx,QWORD PTR [rbp-0x18]
 dde:	64 48 33 1c 25 28 00 	xor    rbx,QWORD PTR fs:0x28
 de5:	00 00 
 de7:	74 05                	je     dee <main+0x19d>
 de9:	e8 22 f9 ff ff       	call   710 <__stack_chk_fail@plt>
 dee:	48 81 c4 88 00 00 00 	add    rsp,0x88
 df5:	5b                   	pop    rbx
 df6:	5d                   	pop    rbp
 df7:	c3                   	ret    
 df8:	0f 1f 84 00 00 00 00 	nop    DWORD PTR [rax+rax*1+0x0]
 dff:	00 

0000000000000e00 <__libc_csu_init>:
 e00:	41 57                	push   r15
 e02:	41 56                	push   r14
 e04:	49 89 d7             	mov    r15,rdx
 e07:	41 55                	push   r13
 e09:	41 54                	push   r12
 e0b:	4c 8d 25 6e 0f 20 00 	lea    r12,[rip+0x200f6e]        # 201d80 <__frame_dummy_init_array_entry>
 e12:	55                   	push   rbp
 e13:	48 8d 2d 6e 0f 20 00 	lea    rbp,[rip+0x200f6e]        # 201d88 <__init_array_end>
 e1a:	53                   	push   rbx
 e1b:	41 89 fd             	mov    r13d,edi
 e1e:	49 89 f6             	mov    r14,rsi
 e21:	4c 29 e5             	sub    rbp,r12
 e24:	48 83 ec 08          	sub    rsp,0x8
 e28:	48 c1 fd 03          	sar    rbp,0x3
 e2c:	e8 8f f8 ff ff       	call   6c0 <_init>
 e31:	48 85 ed             	test   rbp,rbp
 e34:	74 20                	je     e56 <__libc_csu_init+0x56>
 e36:	31 db                	xor    ebx,ebx
 e38:	0f 1f 84 00 00 00 00 	nop    DWORD PTR [rax+rax*1+0x0]
 e3f:	00 
 e40:	4c 89 fa             	mov    rdx,r15
 e43:	4c 89 f6             	mov    rsi,r14
 e46:	44 89 ef             	mov    edi,r13d
 e49:	41 ff 14 dc          	call   QWORD PTR [r12+rbx*8]
 e4d:	48 83 c3 01          	add    rbx,0x1
 e51:	48 39 dd             	cmp    rbp,rbx
 e54:	75 ea                	jne    e40 <__libc_csu_init+0x40>
 e56:	48 83 c4 08          	add    rsp,0x8
 e5a:	5b                   	pop    rbx
 e5b:	5d                   	pop    rbp
 e5c:	41 5c                	pop    r12
 e5e:	41 5d                	pop    r13
 e60:	41 5e                	pop    r14
 e62:	41 5f                	pop    r15
 e64:	c3                   	ret    
 e65:	90                   	nop
 e66:	66 2e 0f 1f 84 00 00 	nop    WORD PTR cs:[rax+rax*1+0x0]
 e6d:	00 00 00 

0000000000000e70 <__libc_csu_fini>:
 e70:	f3 c3                	repz ret 

セクション .fini の逆アセンブル:

0000000000000e74 <_fini>:
 e74:	48 83 ec 08          	sub    rsp,0x8
 e78:	48 83 c4 08          	add    rsp,0x8
 e7c:	c3                   	ret    
