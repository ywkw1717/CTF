
villager:     ファイル形式 elf32-i386


セクション .init の逆アセンブル:

000005f8 <_init>:
 5f8:	55                   	push   ebp
 5f9:	89 e5                	mov    ebp,esp
 5fb:	53                   	push   ebx
 5fc:	83 ec 04             	sub    esp,0x4
 5ff:	e8 00 00 00 00       	call   604 <_init+0xc>
 604:	5b                   	pop    ebx
 605:	81 c3 b8 19 00 00    	add    ebx,0x19b8
 60b:	8b 93 34 00 00 00    	mov    edx,DWORD PTR [ebx+0x34]
 611:	85 d2                	test   edx,edx
 613:	74 05                	je     61a <_init+0x22>
 615:	e8 1e 00 00 00       	call   638 <__gmon_start__@plt>
 61a:	e8 91 01 00 00       	call   7b0 <frame_dummy>
 61f:	e8 7c 03 00 00       	call   9a0 <__do_global_ctors_aux>
 624:	58                   	pop    eax
 625:	5b                   	pop    ebx
 626:	c9                   	leave  
 627:	c3                   	ret    

セクション .plt の逆アセンブル:

00000628 <__gmon_start__@plt-0x10>:
 628:	ff b3 04 00 00 00    	push   DWORD PTR [ebx+0x4]
 62e:	ff a3 08 00 00 00    	jmp    DWORD PTR [ebx+0x8]
 634:	00 00                	add    BYTE PTR [eax],al
	...

00000638 <__gmon_start__@plt>:
 638:	ff a3 0c 00 00 00    	jmp    DWORD PTR [ebx+0xc]
 63e:	68 00 00 00 00       	push   0x0
 643:	e9 e0 ff ff ff       	jmp    628 <_init+0x30>

00000648 <fgets@plt>:
 648:	ff a3 10 00 00 00    	jmp    DWORD PTR [ebx+0x10]
 64e:	68 08 00 00 00       	push   0x8
 653:	e9 d0 ff ff ff       	jmp    628 <_init+0x30>

00000658 <__libc_start_main@plt>:
 658:	ff a3 14 00 00 00    	jmp    DWORD PTR [ebx+0x14]
 65e:	68 10 00 00 00       	push   0x10
 663:	e9 c0 ff ff ff       	jmp    628 <_init+0x30>

00000668 <fflush@plt>:
 668:	ff a3 18 00 00 00    	jmp    DWORD PTR [ebx+0x18]
 66e:	68 18 00 00 00       	push   0x18
 673:	e9 b0 ff ff ff       	jmp    628 <_init+0x30>

00000678 <printf@plt>:
 678:	ff a3 1c 00 00 00    	jmp    DWORD PTR [ebx+0x1c]
 67e:	68 20 00 00 00       	push   0x20
 683:	e9 a0 ff ff ff       	jmp    628 <_init+0x30>

00000688 <__stack_chk_fail@plt>:
 688:	ff a3 20 00 00 00    	jmp    DWORD PTR [ebx+0x20]
 68e:	68 28 00 00 00       	push   0x28
 693:	e9 90 ff ff ff       	jmp    628 <_init+0x30>

00000698 <sleep@plt>:
 698:	ff a3 24 00 00 00    	jmp    DWORD PTR [ebx+0x24]
 69e:	68 30 00 00 00       	push   0x30
 6a3:	e9 80 ff ff ff       	jmp    628 <_init+0x30>

000006a8 <puts@plt>:
 6a8:	ff a3 28 00 00 00    	jmp    DWORD PTR [ebx+0x28]
 6ae:	68 38 00 00 00       	push   0x38
 6b3:	e9 70 ff ff ff       	jmp    628 <_init+0x30>

000006b8 <__gxx_personality_v0@plt>:
 6b8:	ff a3 2c 00 00 00    	jmp    DWORD PTR [ebx+0x2c]
 6be:	68 40 00 00 00       	push   0x40
 6c3:	e9 60 ff ff ff       	jmp    628 <_init+0x30>

000006c8 <__cxa_finalize@plt>:
 6c8:	ff a3 30 00 00 00    	jmp    DWORD PTR [ebx+0x30]
 6ce:	68 48 00 00 00       	push   0x48
 6d3:	e9 50 ff ff ff       	jmp    628 <_init+0x30>

セクション .text の逆アセンブル:

000006e0 <_start>:
 6e0:	31 ed                	xor    ebp,ebp
 6e2:	5e                   	pop    esi
 6e3:	89 e1                	mov    ecx,esp
 6e5:	83 e4 f0             	and    esp,0xfffffff0
 6e8:	50                   	push   eax
 6e9:	54                   	push   esp
 6ea:	52                   	push   edx
 6eb:	e8 22 00 00 00       	call   712 <_start+0x32>
 6f0:	81 c3 cc 18 00 00    	add    ebx,0x18cc
 6f6:	8d 83 74 e9 ff ff    	lea    eax,[ebx-0x168c]
 6fc:	50                   	push   eax
 6fd:	8d 83 84 e9 ff ff    	lea    eax,[ebx-0x167c]
 703:	50                   	push   eax
 704:	51                   	push   ecx
 705:	56                   	push   esi
 706:	ff b3 40 00 00 00    	push   DWORD PTR [ebx+0x40]
 70c:	e8 47 ff ff ff       	call   658 <__libc_start_main@plt>
 711:	f4                   	hlt    
 712:	8b 1c 24             	mov    ebx,DWORD PTR [esp]
 715:	c3                   	ret    
 716:	90                   	nop
 717:	90                   	nop
 718:	90                   	nop
 719:	90                   	nop
 71a:	90                   	nop
 71b:	90                   	nop
 71c:	90                   	nop
 71d:	90                   	nop
 71e:	90                   	nop
 71f:	90                   	nop

00000720 <__do_global_dtors_aux>:
 720:	55                   	push   ebp
 721:	89 e5                	mov    ebp,esp
 723:	56                   	push   esi
 724:	53                   	push   ebx
 725:	e8 bf 00 00 00       	call   7e9 <__i686.get_pc_thunk.bx>
 72a:	81 c3 92 18 00 00    	add    ebx,0x1892
 730:	8d 64 24 f0          	lea    esp,[esp-0x10]
 734:	80 bb 48 00 00 00 00 	cmp    BYTE PTR [ebx+0x48],0x0
 73b:	75 5c                	jne    799 <__do_global_dtors_aux+0x79>
 73d:	8b 83 3c 00 00 00    	mov    eax,DWORD PTR [ebx+0x3c]
 743:	85 c0                	test   eax,eax
 745:	74 0e                	je     755 <__do_global_dtors_aux+0x35>
 747:	8d 83 04 ff ff ff    	lea    eax,[ebx-0xfc]
 74d:	89 04 24             	mov    DWORD PTR [esp],eax
 750:	e8 73 ff ff ff       	call   6c8 <__cxa_finalize@plt>
 755:	8d b3 fc fe ff ff    	lea    esi,[ebx-0x104]
 75b:	8d 93 f8 fe ff ff    	lea    edx,[ebx-0x108]
 761:	29 d6                	sub    esi,edx
 763:	8b 83 4c 00 00 00    	mov    eax,DWORD PTR [ebx+0x4c]
 769:	c1 fe 02             	sar    esi,0x2
 76c:	83 ee 01             	sub    esi,0x1
 76f:	39 f0                	cmp    eax,esi
 771:	73 1f                	jae    792 <__do_global_dtors_aux+0x72>
 773:	90                   	nop
 774:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
 778:	83 c0 01             	add    eax,0x1
 77b:	89 83 4c 00 00 00    	mov    DWORD PTR [ebx+0x4c],eax
 781:	ff 94 83 f8 fe ff ff 	call   DWORD PTR [ebx+eax*4-0x108]
 788:	8b 83 4c 00 00 00    	mov    eax,DWORD PTR [ebx+0x4c]
 78e:	39 f0                	cmp    eax,esi
 790:	72 e6                	jb     778 <__do_global_dtors_aux+0x58>
 792:	c6 83 48 00 00 00 01 	mov    BYTE PTR [ebx+0x48],0x1
 799:	8d 64 24 10          	lea    esp,[esp+0x10]
 79d:	5b                   	pop    ebx
 79e:	5e                   	pop    esi
 79f:	5d                   	pop    ebp
 7a0:	c3                   	ret    
 7a1:	eb 0d                	jmp    7b0 <frame_dummy>
 7a3:	90                   	nop
 7a4:	90                   	nop
 7a5:	90                   	nop
 7a6:	90                   	nop
 7a7:	90                   	nop
 7a8:	90                   	nop
 7a9:	90                   	nop
 7aa:	90                   	nop
 7ab:	90                   	nop
 7ac:	90                   	nop
 7ad:	90                   	nop
 7ae:	90                   	nop
 7af:	90                   	nop

000007b0 <frame_dummy>:
 7b0:	55                   	push   ebp
 7b1:	89 e5                	mov    ebp,esp
 7b3:	53                   	push   ebx
 7b4:	e8 30 00 00 00       	call   7e9 <__i686.get_pc_thunk.bx>
 7b9:	81 c3 03 18 00 00    	add    ebx,0x1803
 7bf:	8d 64 24 ec          	lea    esp,[esp-0x14]
 7c3:	8b 93 00 ff ff ff    	mov    edx,DWORD PTR [ebx-0x100]
 7c9:	85 d2                	test   edx,edx
 7cb:	74 15                	je     7e2 <frame_dummy+0x32>
 7cd:	8b 83 38 00 00 00    	mov    eax,DWORD PTR [ebx+0x38]
 7d3:	85 c0                	test   eax,eax
 7d5:	74 0b                	je     7e2 <frame_dummy+0x32>
 7d7:	8d 93 00 ff ff ff    	lea    edx,[ebx-0x100]
 7dd:	89 14 24             	mov    DWORD PTR [esp],edx
 7e0:	ff d0                	call   eax
 7e2:	8d 64 24 14          	lea    esp,[esp+0x14]
 7e6:	5b                   	pop    ebx
 7e7:	5d                   	pop    ebp
 7e8:	c3                   	ret    

000007e9 <__i686.get_pc_thunk.bx>:
 7e9:	8b 1c 24             	mov    ebx,DWORD PTR [esp]
 7ec:	c3                   	ret    
 7ed:	90                   	nop
 7ee:	90                   	nop
 7ef:	90                   	nop

000007f0 <_Z4convv>:
 7f0:	55                   	push   ebp
 7f1:	89 e5                	mov    ebp,esp
 7f3:	81 ec 38 01 00 00    	sub    esp,0x138
 7f9:	c7 04 24 fc 09 00 00 	mov    DWORD PTR [esp],0x9fc # "What's your name?"
 800:	89 5d f4             	mov    DWORD PTR [ebp-0xc],ebx
 803:	8d 9d e4 fe ff ff    	lea    ebx,[ebp-0x11c]
 809:	89 75 f8             	mov    DWORD PTR [ebp-0x8],esi
 80c:	89 de                	mov    esi,ebx
 80e:	89 7d fc             	mov    DWORD PTR [ebp-0x4],edi
 811:	bf 2a 0a 00 00       	mov    edi,0xa2a # '\n'
 816:	65 a1 14 00 00 00    	mov    eax,gs:0x14
 81c:	89 45 e4             	mov    DWORD PTR [ebp-0x1c],eax
 81f:	31 c0                	xor    eax,eax
 821:	e8 fc ff ff ff       	call   822 <_Z4convv+0x32> # puts("What's your name?")
 826:	a1 00 00 00 00       	mov    eax,ds:0x0
 82b:	89 04 24             	mov    DWORD PTR [esp],eax
 82e:	e8 fc ff ff ff       	call   82f <_Z4convv+0x3f> # fflush
 833:	a1 00 00 00 00       	mov    eax,ds:0x0
 838:	c7 44 24 04 00 01 00 	mov    DWORD PTR [esp+0x4],0x100
 83f:	00 
 840:	89 1c 24             	mov    DWORD PTR [esp],ebx
 843:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
 847:	e8 fc ff ff ff       	call   848 <_Z4convv+0x58> # fgets
/* Guessed arguments: */
/* arg[0]: 0xffffbbfc --> 0x5  */
/* arg[1]: 0x100  */
/* arg[2]: 0xf7dba5a0 --> 0xfbad2088 */
 84c:	b9 02 00 00 00       	mov    ecx,0x2
 851:	b8 01 00 00 00       	mov    eax,0x1
 856:	f3 a6                	repz cmps BYTE PTR ds:[esi],BYTE PTR es:[edi]

 858:	0f 97 c1             	seta   cl
 85b:	0f 92 c2             	setb   dl
 85e:	38 d1                	cmp    cl,dl

 860:	74 2f                	je     891 <_Z4convv+0xa1> # loop end course

 862:	c7 04 24 0e 0a 00 00 	mov    DWORD PTR [esp],0xa0e # "Hi, "
 869:	e8 fc ff ff ff       	call   86a <_Z4convv+0x7a> # printf("Hi, ")
 86e:	89 1c 24             	mov    DWORD PTR [esp],ebx
 871:	e8 fc ff ff ff       	call   872 <_Z4convv+0x82> # printf(input_value + "\n")
 876:	c7 04 24 13 0a 00 00 	mov    DWORD PTR [esp],0xa13
 87d:	e8 fc ff ff ff       	call   87e <_Z4convv+0x8e> # puts("Here is Despair Town...\n")
 882:	a1 00 00 00 00       	mov    eax,ds:0x0
 887:	89 04 24             	mov    DWORD PTR [esp],eax
 88a:	e8 fc ff ff ff       	call   88b <_Z4convv+0x9b> # fflush
/* Guessed arguments: */
/* arg[0]: 0xf7dbad60 --> 0xfbad2a84 */
 88f:	31 c0                	xor    eax,eax
 891:	8b 55 e4             	mov    edx,DWORD PTR [ebp-0x1c]
 894:	65 33 15 14 00 00 00 	xor    edx,DWORD PTR gs:0x14
 89b:	75 0d                	jne    8aa <_Z4convv+0xba> # overflow?

 89d:	8b 5d f4             	mov    ebx,DWORD PTR [ebp-0xc]
 8a0:	8b 75 f8             	mov    esi,DWORD PTR [ebp-0x8]
 8a3:	8b 7d fc             	mov    edi,DWORD PTR [ebp-0x4]
 8a6:	89 ec                	mov    esp,ebp
 8a8:	5d                   	pop    ebp
 8a9:	c3                   	ret    
 8aa:	e8 fc ff ff ff       	call   8ab <_Z4convv+0xbb> # <__stack_chk_fail>
 8af:	90                   	nop

000008b0 <main>:
 8b0:	55                   	push   ebp
 8b1:	89 e5                	mov    ebp,esp
 8b3:	83 e4 f0             	and    esp,0xfffffff0
 8b6:	83 ec 20             	sub    esp,0x20
 8b9:	65 a1 14 00 00 00    	mov    eax,gs:0x14
 8bf:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
 8c3:	31 c0                	xor    eax,eax
 8c5:	c7 04 24 2c 0a 00 00 	mov    DWORD PTR [esp],0xa2c
 8cc:	e8 fc ff ff ff       	call   8cd <main+0x1d> # puts("Welcome")
 8d1:	a1 00 00 00 00       	mov    eax,ds:0x0
 8d6:	89 04 24             	mov    DWORD PTR [esp],eax
 8d9:	e8 fc ff ff ff       	call   8da <main+0x2a> # fflush
 8de:	66 90                	xchg   ax,ax

# loop start
 8e0:	c7 04 24 03 00 00 00 	mov    DWORD PTR [esp],0x3
 8e7:	e8 fc ff ff ff       	call   8e8 <main+0x38> # sleep(3)
 8ec:	e8 ff fe ff ff       	call   7f0 <_Z4convv>
 8f1:	84 c0                	test   al,al
 8f3:	74 eb                	je     8e0 <main+0x30>
# loop end

 8f5:	c7 04 24 34 0a 00 00 	mov    DWORD PTR [esp],0xa34
 8fc:	e8 fc ff ff ff       	call   8fd <main+0x4d> # puts("Good bye.")
 901:	a1 00 00 00 00       	mov    eax,ds:0x0
 906:	89 04 24             	mov    DWORD PTR [esp],eax
 909:	e8 fc ff ff ff       	call   90a <main+0x5a> # fflush
 90e:	31 c0                	xor    eax,eax
 910:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
 914:	65 33 15 14 00 00 00 	xor    edx,DWORD PTR gs:0x14
 91b:	75 02                	jne    91f <main+0x6f>
 91d:	c9                   	leave  
 91e:	c3                   	ret    
 91f:	90                   	nop
 920:	e8 fc ff ff ff       	call   921 <main+0x71>
 925:	90                   	nop
 926:	90                   	nop
 927:	90                   	nop
 928:	90                   	nop
 929:	90                   	nop
 92a:	90                   	nop
 92b:	90                   	nop
 92c:	90                   	nop
 92d:	90                   	nop
 92e:	90                   	nop
 92f:	90                   	nop

00000930 <__libc_csu_fini>:
 930:	55                   	push   ebp
 931:	89 e5                	mov    ebp,esp
 933:	5d                   	pop    ebp
 934:	c3                   	ret    
 935:	66 66 2e 0f 1f 84 00 	data16 nop WORD PTR cs:[eax+eax*1+0x0]
 93c:	00 00 00 00 

00000940 <__libc_csu_init>:
 940:	55                   	push   ebp
 941:	89 e5                	mov    ebp,esp
 943:	57                   	push   edi
 944:	56                   	push   esi
 945:	53                   	push   ebx
 946:	e8 9e fe ff ff       	call   7e9 <__i686.get_pc_thunk.bx>
 94b:	81 c3 71 16 00 00    	add    ebx,0x1671
 951:	83 ec 1c             	sub    esp,0x1c
 954:	e8 9f fc ff ff       	call   5f8 <_init>
 959:	8d bb f0 fe ff ff    	lea    edi,[ebx-0x110]
 95f:	8d 83 f0 fe ff ff    	lea    eax,[ebx-0x110]
 965:	29 c7                	sub    edi,eax
 967:	c1 ff 02             	sar    edi,0x2
 96a:	85 ff                	test   edi,edi
 96c:	74 24                	je     992 <__libc_csu_init+0x52>
 96e:	31 f6                	xor    esi,esi
 970:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
 973:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
 977:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
 97a:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
 97e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
 981:	89 04 24             	mov    DWORD PTR [esp],eax
 984:	ff 94 b3 f0 fe ff ff 	call   DWORD PTR [ebx+esi*4-0x110]
 98b:	83 c6 01             	add    esi,0x1
 98e:	39 fe                	cmp    esi,edi
 990:	72 de                	jb     970 <__libc_csu_init+0x30>
 992:	83 c4 1c             	add    esp,0x1c
 995:	5b                   	pop    ebx
 996:	5e                   	pop    esi
 997:	5f                   	pop    edi
 998:	5d                   	pop    ebp
 999:	c3                   	ret    
 99a:	90                   	nop
 99b:	90                   	nop
 99c:	90                   	nop
 99d:	90                   	nop
 99e:	90                   	nop
 99f:	90                   	nop

000009a0 <__do_global_ctors_aux>:
 9a0:	55                   	push   ebp
 9a1:	89 e5                	mov    ebp,esp
 9a3:	56                   	push   esi
 9a4:	53                   	push   ebx
 9a5:	e8 3f fe ff ff       	call   7e9 <__i686.get_pc_thunk.bx>
 9aa:	81 c3 12 16 00 00    	add    ebx,0x1612
 9b0:	8b 83 f0 fe ff ff    	mov    eax,DWORD PTR [ebx-0x110]
 9b6:	83 f8 ff             	cmp    eax,0xffffffff
 9b9:	74 19                	je     9d4 <__do_global_ctors_aux+0x34>
 9bb:	8d b3 f0 fe ff ff    	lea    esi,[ebx-0x110]
 9c1:	8d b4 26 00 00 00 00 	lea    esi,[esi+eiz*1+0x0]
 9c8:	8d 76 fc             	lea    esi,[esi-0x4]
 9cb:	ff d0                	call   eax
 9cd:	8b 06                	mov    eax,DWORD PTR [esi]
 9cf:	83 f8 ff             	cmp    eax,0xffffffff
 9d2:	75 f4                	jne    9c8 <__do_global_ctors_aux+0x28>
 9d4:	5b                   	pop    ebx
 9d5:	5e                   	pop    esi
 9d6:	5d                   	pop    ebp
 9d7:	c3                   	ret    

セクション .fini の逆アセンブル:

000009d8 <_fini>:
 9d8:	55                   	push   ebp
 9d9:	89 e5                	mov    ebp,esp
 9db:	53                   	push   ebx
 9dc:	83 ec 04             	sub    esp,0x4
 9df:	e8 00 00 00 00       	call   9e4 <_fini+0xc>
 9e4:	5b                   	pop    ebx
 9e5:	81 c3 d8 15 00 00    	add    ebx,0x15d8
 9eb:	e8 30 fd ff ff       	call   720 <__do_global_dtors_aux>
 9f0:	59                   	pop    ecx
 9f1:	5b                   	pop    ebx
 9f2:	c9                   	leave  
 9f3:	c3                   	ret    
