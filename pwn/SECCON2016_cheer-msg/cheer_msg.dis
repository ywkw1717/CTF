
cheer_msg:     ファイル形式 elf32-i386


セクション .init の逆アセンブル:

080483e8 <_init>:
 80483e8:	53                   	push   ebx
 80483e9:	83 ec 08             	sub    esp,0x8
 80483ec:	e8 ef 00 00 00       	call   80484e0 <__x86.get_pc_thunk.bx>
 80483f1:	81 c3 0f 1c 00 00    	add    ebx,0x1c0f
 80483f7:	8b 83 fc ff ff ff    	mov    eax,DWORD PTR [ebx-0x4]
 80483fd:	85 c0                	test   eax,eax
 80483ff:	74 05                	je     8048406 <_init+0x1e>
 8048401:	e8 5a 00 00 00       	call   8048460 <__gmon_start__@plt>
 8048406:	83 c4 08             	add    esp,0x8
 8048409:	5b                   	pop    ebx
 804840a:	c3                   	ret    

セクション .plt の逆アセンブル:

08048410 <setbuf@plt-0x10>:
 8048410:	ff 35 04 a0 04 08    	push   DWORD PTR ds:0x804a004
 8048416:	ff 25 08 a0 04 08    	jmp    DWORD PTR ds:0x804a008
 804841c:	00 00                	add    BYTE PTR [eax],al
	...

08048420 <setbuf@plt>:
 8048420:	ff 25 0c a0 04 08    	jmp    DWORD PTR ds:0x804a00c
 8048426:	68 00 00 00 00       	push   0x0
 804842b:	e9 e0 ff ff ff       	jmp    8048410 <_init+0x28>

08048430 <printf@plt>:
 8048430:	ff 25 10 a0 04 08    	jmp    DWORD PTR ds:0x804a010
 8048436:	68 08 00 00 00       	push   0x8
 804843b:	e9 d0 ff ff ff       	jmp    8048410 <_init+0x28>

08048440 <fgets@plt>:
 8048440:	ff 25 14 a0 04 08    	jmp    DWORD PTR ds:0x804a014
 8048446:	68 10 00 00 00       	push   0x10
 804844b:	e9 c0 ff ff ff       	jmp    8048410 <_init+0x28>

08048450 <__stack_chk_fail@plt>:
 8048450:	ff 25 18 a0 04 08    	jmp    DWORD PTR ds:0x804a018
 8048456:	68 18 00 00 00       	push   0x18
 804845b:	e9 b0 ff ff ff       	jmp    8048410 <_init+0x28>

08048460 <__gmon_start__@plt>:
 8048460:	ff 25 1c a0 04 08    	jmp    DWORD PTR ds:0x804a01c
 8048466:	68 20 00 00 00       	push   0x20
 804846b:	e9 a0 ff ff ff       	jmp    8048410 <_init+0x28>

08048470 <strchr@plt>:
 8048470:	ff 25 20 a0 04 08    	jmp    DWORD PTR ds:0x804a020
 8048476:	68 28 00 00 00       	push   0x28
 804847b:	e9 90 ff ff ff       	jmp    8048410 <_init+0x28>

08048480 <strlen@plt>:
 8048480:	ff 25 24 a0 04 08    	jmp    DWORD PTR ds:0x804a024
 8048486:	68 30 00 00 00       	push   0x30
 804848b:	e9 80 ff ff ff       	jmp    8048410 <_init+0x28>

08048490 <__libc_start_main@plt>:
 8048490:	ff 25 28 a0 04 08    	jmp    DWORD PTR ds:0x804a028
 8048496:	68 38 00 00 00       	push   0x38
 804849b:	e9 70 ff ff ff       	jmp    8048410 <_init+0x28>

080484a0 <atoi@plt>:
 80484a0:	ff 25 2c a0 04 08    	jmp    DWORD PTR ds:0x804a02c
 80484a6:	68 40 00 00 00       	push   0x40
 80484ab:	e9 60 ff ff ff       	jmp    8048410 <_init+0x28>

セクション .text の逆アセンブル:

080484b0 <_start>:
 80484b0:	31 ed                	xor    ebp,ebp
 80484b2:	5e                   	pop    esi
 80484b3:	89 e1                	mov    ecx,esp
 80484b5:	83 e4 f0             	and    esp,0xfffffff0
 80484b8:	50                   	push   eax
 80484b9:	54                   	push   esp
 80484ba:	52                   	push   edx
 80484bb:	68 c0 87 04 08       	push   0x80487c0
 80484c0:	68 50 87 04 08       	push   0x8048750
 80484c5:	51                   	push   ecx
 80484c6:	56                   	push   esi
 80484c7:	68 ca 85 04 08       	push   0x80485ca
 80484cc:	e8 bf ff ff ff       	call   8048490 <__libc_start_main@plt>
 80484d1:	f4                   	hlt    
 80484d2:	66 90                	xchg   ax,ax
 80484d4:	66 90                	xchg   ax,ax
 80484d6:	66 90                	xchg   ax,ax
 80484d8:	66 90                	xchg   ax,ax
 80484da:	66 90                	xchg   ax,ax
 80484dc:	66 90                	xchg   ax,ax
 80484de:	66 90                	xchg   ax,ax

080484e0 <__x86.get_pc_thunk.bx>:
 80484e0:	8b 1c 24             	mov    ebx,DWORD PTR [esp]
 80484e3:	c3                   	ret    
 80484e4:	66 90                	xchg   ax,ax
 80484e6:	66 90                	xchg   ax,ax
 80484e8:	66 90                	xchg   ax,ax
 80484ea:	66 90                	xchg   ax,ax
 80484ec:	66 90                	xchg   ax,ax
 80484ee:	66 90                	xchg   ax,ax

080484f0 <deregister_tm_clones>:
 80484f0:	b8 3b a0 04 08       	mov    eax,0x804a03b
 80484f5:	2d 38 a0 04 08       	sub    eax,0x804a038
 80484fa:	83 f8 06             	cmp    eax,0x6
 80484fd:	77 01                	ja     8048500 <deregister_tm_clones+0x10>
 80484ff:	c3                   	ret    
 8048500:	b8 00 00 00 00       	mov    eax,0x0
 8048505:	85 c0                	test   eax,eax
 8048507:	74 f6                	je     80484ff <deregister_tm_clones+0xf>
 8048509:	55                   	push   ebp
 804850a:	89 e5                	mov    ebp,esp
 804850c:	83 ec 18             	sub    esp,0x18
 804850f:	c7 04 24 38 a0 04 08 	mov    DWORD PTR [esp],0x804a038
 8048516:	ff d0                	call   eax
 8048518:	c9                   	leave  
 8048519:	c3                   	ret    
 804851a:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]

08048520 <register_tm_clones>:
 8048520:	b8 38 a0 04 08       	mov    eax,0x804a038
 8048525:	2d 38 a0 04 08       	sub    eax,0x804a038
 804852a:	c1 f8 02             	sar    eax,0x2
 804852d:	89 c2                	mov    edx,eax
 804852f:	c1 ea 1f             	shr    edx,0x1f
 8048532:	01 d0                	add    eax,edx
 8048534:	d1 f8                	sar    eax,1
 8048536:	75 01                	jne    8048539 <register_tm_clones+0x19>
 8048538:	c3                   	ret    
 8048539:	ba 00 00 00 00       	mov    edx,0x0
 804853e:	85 d2                	test   edx,edx
 8048540:	74 f6                	je     8048538 <register_tm_clones+0x18>
 8048542:	55                   	push   ebp
 8048543:	89 e5                	mov    ebp,esp
 8048545:	83 ec 18             	sub    esp,0x18
 8048548:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
 804854c:	c7 04 24 38 a0 04 08 	mov    DWORD PTR [esp],0x804a038
 8048553:	ff d2                	call   edx
 8048555:	c9                   	leave  
 8048556:	c3                   	ret    
 8048557:	89 f6                	mov    esi,esi
 8048559:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]

08048560 <__do_global_dtors_aux>:
 8048560:	80 3d 64 a0 04 08 00 	cmp    BYTE PTR ds:0x804a064,0x0
 8048567:	75 13                	jne    804857c <__do_global_dtors_aux+0x1c>
 8048569:	55                   	push   ebp
 804856a:	89 e5                	mov    ebp,esp
 804856c:	83 ec 08             	sub    esp,0x8
 804856f:	e8 7c ff ff ff       	call   80484f0 <deregister_tm_clones>
 8048574:	c6 05 64 a0 04 08 01 	mov    BYTE PTR ds:0x804a064,0x1
 804857b:	c9                   	leave  
 804857c:	f3 c3                	repz ret 
 804857e:	66 90                	xchg   ax,ax

08048580 <frame_dummy>:
 8048580:	a1 10 9f 04 08       	mov    eax,ds:0x8049f10
 8048585:	85 c0                	test   eax,eax
 8048587:	74 1f                	je     80485a8 <frame_dummy+0x28>
 8048589:	b8 00 00 00 00       	mov    eax,0x0
 804858e:	85 c0                	test   eax,eax
 8048590:	74 16                	je     80485a8 <frame_dummy+0x28>
 8048592:	55                   	push   ebp
 8048593:	89 e5                	mov    ebp,esp
 8048595:	83 ec 18             	sub    esp,0x18
 8048598:	c7 04 24 10 9f 04 08 	mov    DWORD PTR [esp],0x8049f10
 804859f:	ff d0                	call   eax
 80485a1:	c9                   	leave  
 80485a2:	e9 79 ff ff ff       	jmp    8048520 <register_tm_clones>
 80485a7:	90                   	nop
 80485a8:	e9 73 ff ff ff       	jmp    8048520 <register_tm_clones>

080485ad <init>:
 80485ad:	55                   	push   ebp
 80485ae:	89 e5                	mov    ebp,esp
 80485b0:	83 ec 18             	sub    esp,0x18
 80485b3:	a1 60 a0 04 08       	mov    eax,ds:0x804a060
 80485b8:	c7 44 24 04 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
 80485bf:	00 
 80485c0:	89 04 24             	mov    DWORD PTR [esp],eax
 80485c3:	e8 58 fe ff ff       	call   8048420 <setbuf@plt>
 80485c8:	c9                   	leave  
 80485c9:	c3                   	ret    

080485ca <main>:
 80485ca:	8d 4c 24 04          	lea    ecx,[esp+0x4]
 80485ce:	83 e4 f0             	and    esp,0xfffffff0
 80485d1:	ff 71 fc             	push   DWORD PTR [ecx-0x4]
 80485d4:	55                   	push   ebp
 80485d5:	89 e5                	mov    ebp,esp
 80485d7:	51                   	push   ecx
 80485d8:	83 ec 24             	sub    esp,0x24
 80485db:	c7 04 24 e0 87 04 08 	mov    DWORD PTR [esp],0x80487e0
 80485e2:	e8 49 fe ff ff       	call   8048430 <printf@plt>
 80485e7:	e8 21 01 00 00       	call   804870d <getint>
 80485ec:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
 80485ef:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
 80485f2:	8d 50 0f             	lea    edx,[eax+0xf]
 80485f5:	b8 10 00 00 00       	mov    eax,0x10
 80485fa:	83 e8 01             	sub    eax,0x1
 80485fd:	01 d0                	add    eax,edx
 80485ff:	b9 10 00 00 00       	mov    ecx,0x10
 8048604:	ba 00 00 00 00       	mov    edx,0x0
 8048609:	f7 f1                	div    ecx
 804860b:	6b c0 10             	imul   eax,eax,0x10
 804860e:	29 c4                	sub    esp,eax
 8048610:	8d 44 24 08          	lea    eax,[esp+0x8]
 8048614:	83 c0 0f             	add    eax,0xf
 8048617:	c1 e8 04             	shr    eax,0x4
 804861a:	c1 e0 04             	shl    eax,0x4
 804861d:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
 8048620:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
 8048623:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
 8048627:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
 804862a:	89 04 24             	mov    DWORD PTR [esp],eax
 804862d:	e8 0a 00 00 00       	call   804863c <message>
 8048632:	c9                   	leave  
 8048633:	c3                   	ret    
 8048634:	90                   	nop
 8048635:	90                   	nop
 8048636:	90                   	nop
 8048637:	90                   	nop
 8048638:	90                   	nop
 8048639:	90                   	nop
 804863a:	90                   	nop
 804863b:	90                   	nop

0804863c <message>:
 804863c:	55                   	push   ebp
 804863d:	89 e5                	mov    ebp,esp
 804863f:	83 ec 68             	sub    esp,0x68
 8048642:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
 8048645:	89 45 a4             	mov    DWORD PTR [ebp-0x5c],eax
 8048648:	65 a1 14 00 00 00    	mov    eax,gs:0x14
 804864e:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
 8048651:	31 c0                	xor    eax,eax
 8048653:	c7 04 24 26 88 04 08 	mov    DWORD PTR [esp],0x8048826
 804865a:	e8 d1 fd ff ff       	call   8048430 <printf@plt>
 804865f:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
 8048662:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
 8048666:	8b 45 a4             	mov    eax,DWORD PTR [ebp-0x5c]
 8048669:	89 04 24             	mov    DWORD PTR [esp],eax
 804866c:	e8 4c 00 00 00       	call   80486bd <getnline>
 8048671:	c7 04 24 34 88 04 08 	mov    DWORD PTR [esp],0x8048834
 8048678:	e8 b3 fd ff ff       	call   8048430 <printf@plt>
 804867d:	c7 44 24 04 40 00 00 	mov    DWORD PTR [esp+0x4],0x40
 8048684:	00 
 8048685:	8d 45 b4             	lea    eax,[ebp-0x4c]
 8048688:	89 04 24             	mov    DWORD PTR [esp],eax
 804868b:	e8 2d 00 00 00       	call   80486bd <getnline>
 8048690:	8b 45 a4             	mov    eax,DWORD PTR [ebp-0x5c]
 8048693:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
 8048697:	8d 45 b4             	lea    eax,[ebp-0x4c]
 804869a:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
 804869e:	c7 04 24 7d 88 04 08 	mov    DWORD PTR [esp],0x804887d
 80486a5:	e8 86 fd ff ff       	call   8048430 <printf@plt>
 80486aa:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
 80486ad:	65 33 05 14 00 00 00 	xor    eax,DWORD PTR gs:0x14
 80486b4:	74 05                	je     80486bb <message+0x7f>
 80486b6:	e8 95 fd ff ff       	call   8048450 <__stack_chk_fail@plt>
 80486bb:	c9                   	leave  
 80486bc:	c3                   	ret    

080486bd <getnline>:
 80486bd:	55                   	push   ebp
 80486be:	89 e5                	mov    ebp,esp
 80486c0:	83 ec 28             	sub    esp,0x28
 80486c3:	a1 40 a0 04 08       	mov    eax,ds:0x804a040
 80486c8:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
 80486cc:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
 80486cf:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
 80486d3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
 80486d6:	89 04 24             	mov    DWORD PTR [esp],eax
 80486d9:	e8 62 fd ff ff       	call   8048440 <fgets@plt>
 80486de:	c7 44 24 04 0a 00 00 	mov    DWORD PTR [esp+0x4],0xa
 80486e5:	00 
 80486e6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
 80486e9:	89 04 24             	mov    DWORD PTR [esp],eax
 80486ec:	e8 7f fd ff ff       	call   8048470 <strchr@plt>
 80486f1:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
 80486f4:	83 7d f4 00          	cmp    DWORD PTR [ebp-0xc],0x0
 80486f8:	74 06                	je     8048700 <getnline+0x43>
 80486fa:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
 80486fd:	c6 00 00             	mov    BYTE PTR [eax],0x0
 8048700:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
 8048703:	89 04 24             	mov    DWORD PTR [esp],eax
 8048706:	e8 75 fd ff ff       	call   8048480 <strlen@plt>
 804870b:	c9                   	leave  
 804870c:	c3                   	ret    

0804870d <getint>:
 804870d:	55                   	push   ebp
 804870e:	89 e5                	mov    ebp,esp
 8048710:	83 ec 68             	sub    esp,0x68
 8048713:	65 a1 14 00 00 00    	mov    eax,gs:0x14
 8048719:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
 804871c:	31 c0                	xor    eax,eax
 804871e:	c7 44 24 04 40 00 00 	mov    DWORD PTR [esp+0x4],0x40
 8048725:	00 
 8048726:	8d 45 b4             	lea    eax,[ebp-0x4c]
 8048729:	89 04 24             	mov    DWORD PTR [esp],eax
 804872c:	e8 8c ff ff ff       	call   80486bd <getnline>
 8048731:	8d 45 b4             	lea    eax,[ebp-0x4c]
 8048734:	89 04 24             	mov    DWORD PTR [esp],eax
 8048737:	e8 64 fd ff ff       	call   80484a0 <atoi@plt>
 804873c:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
 804873f:	65 33 15 14 00 00 00 	xor    edx,DWORD PTR gs:0x14
 8048746:	74 05                	je     804874d <getint+0x40>
 8048748:	e8 03 fd ff ff       	call   8048450 <__stack_chk_fail@plt>
 804874d:	c9                   	leave  
 804874e:	c3                   	ret    
 804874f:	90                   	nop

08048750 <__libc_csu_init>:
 8048750:	55                   	push   ebp
 8048751:	57                   	push   edi
 8048752:	31 ff                	xor    edi,edi
 8048754:	56                   	push   esi
 8048755:	53                   	push   ebx
 8048756:	e8 85 fd ff ff       	call   80484e0 <__x86.get_pc_thunk.bx>
 804875b:	81 c3 a5 18 00 00    	add    ebx,0x18a5
 8048761:	83 ec 1c             	sub    esp,0x1c
 8048764:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
 8048768:	8d b3 0c ff ff ff    	lea    esi,[ebx-0xf4]
 804876e:	e8 75 fc ff ff       	call   80483e8 <_init>
 8048773:	8d 83 04 ff ff ff    	lea    eax,[ebx-0xfc]
 8048779:	29 c6                	sub    esi,eax
 804877b:	c1 fe 02             	sar    esi,0x2
 804877e:	85 f6                	test   esi,esi
 8048780:	74 27                	je     80487a9 <__libc_csu_init+0x59>
 8048782:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
 8048788:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
 804878c:	89 2c 24             	mov    DWORD PTR [esp],ebp
 804878f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
 8048793:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
 8048797:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
 804879b:	ff 94 bb 04 ff ff ff 	call   DWORD PTR [ebx+edi*4-0xfc]
 80487a2:	83 c7 01             	add    edi,0x1
 80487a5:	39 f7                	cmp    edi,esi
 80487a7:	75 df                	jne    8048788 <__libc_csu_init+0x38>
 80487a9:	83 c4 1c             	add    esp,0x1c
 80487ac:	5b                   	pop    ebx
 80487ad:	5e                   	pop    esi
 80487ae:	5f                   	pop    edi
 80487af:	5d                   	pop    ebp
 80487b0:	c3                   	ret    
 80487b1:	eb 0d                	jmp    80487c0 <__libc_csu_fini>
 80487b3:	90                   	nop
 80487b4:	90                   	nop
 80487b5:	90                   	nop
 80487b6:	90                   	nop
 80487b7:	90                   	nop
 80487b8:	90                   	nop
 80487b9:	90                   	nop
 80487ba:	90                   	nop
 80487bb:	90                   	nop
 80487bc:	90                   	nop
 80487bd:	90                   	nop
 80487be:	90                   	nop
 80487bf:	90                   	nop

080487c0 <__libc_csu_fini>:
 80487c0:	f3 c3                	repz ret 

セクション .fini の逆アセンブル:

080487c4 <_fini>:
 80487c4:	53                   	push   ebx
 80487c5:	83 ec 08             	sub    esp,0x8
 80487c8:	e8 13 fd ff ff       	call   80484e0 <__x86.get_pc_thunk.bx>
 80487cd:	81 c3 33 18 00 00    	add    ebx,0x1833
 80487d3:	83 c4 08             	add    esp,0x8
 80487d6:	5b                   	pop    ebx
 80487d7:	c3                   	ret    
